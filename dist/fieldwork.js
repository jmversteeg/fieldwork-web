!function e(t,n,r){function i(s,a){if(!n[s]){if(!t[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(o)return o(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=n[s]={exports:{}};t[s][0].call(u.exports,function(e){var n=t[s][1][e];return i(n?n:e)},u,u.exports,e,t,n,r)}return n[s].exports}for(var o="function"==typeof require&&require,s=0;s<r.length;s++)i(r[s]);return i}({1:[function(e,t){e("./common/tooltips"),e("select2");var n=(e("lodash"),e("jquery")),r=e("./validator"),i=e("./components/Form"),o=e("./components/Field");Fieldwork.Validator=r,Fieldwork.Form=i,Fieldwork.Field=o,n.fn.fieldwork=function(e){return new i(n(this),e)},t.exports=Fieldwork},{"./common/tooltips":2,"./components/Field":3,"./components/Form":4,"./validator":6,jquery:7,lodash:8,select2:9}],2:[function(e){var t=e("jquery"),n={active:-1,activeTooltip:-1,container:0,trackInterval:-1,resolveTrackingElement:function(e){return e.is('[type="checkbox"]')?e.parent():e},positionTooltip:function(e,t){var n=this.resolveTrackingElement(t).offset();e.css({top:n.top+t.outerHeight(),left:Math.round(n.left+t.outerWidth()/2-e.outerWidth()/2)})},track:function(){this.resolveTrackingElement(this.active).is(":visible")?this.positionTooltip(this.activeTooltip,this.active):this.dismiss()},startTrack:function(){this.trackInterval=window.setInterval(function(){n.track()},30),t(document).on({"scroll.jt":function(){n.track()}})},dismiss:function(){-1!==this.trackInterval&&(window.clearInterval(this.trackInterval),this.trackInterval=-1),t(document).off(".jt");var e=this.activeTooltip;e.stop().animate({opacity:0},{duration:200,complete:function(){t(this).remove()}}),this.active=this.activeTooltip=-1},isActive:function(e){return-1!==this.active?this.active[0]===e[0]:!1}};t.fn.jtLink=function(e,n,r){this.data("jt",{html:e}),_.forEach(n,function(e){this.on(e+".fw",function(){t(this).jtShow()})},this),_.forEach(r,function(e){this.on(e+".fw",function(){t(this).jtHide()})},this)},t.fn.jtUnlink=function(){var e=this;e.jtHide(),e.removeData("jt"),e.removeData("jt-tt"),e.off(".jt")},t.fn.jtShow=function(){var e=this;if(!n.isActive(e)){-1!==n.active&&n.dismiss(),n.active=e;var r=t('<div class="jt-wrapper"><div class="jt-arrow"></div><div class="jt-inner">'+e.data("jt").html+"</div></div>").css({opacity:0}).stop().animate({opacity:.95},{duration:200});t("body").append(r),n.positionTooltip(r,e),n.activeTooltip=r,n.startTrack()}return this},t.fn.jtHide=function(){var e=this;return n.isActive(e)&&n.dismiss(),this},modules.exports=n},{jquery:7}],3:[function(e,t){function n(e,t){this.form=e,this.element=r("#"+t.id),this.touched=!1,this.valid=!1,this.valueWhenLastFocused="",this.validators=t.validators,this.sanitizers=t.sanitizers,t.hasOwnProperty("dtConfig")&&this.element.datetimepicker(t.dtConfig),this.isButton=t.isButton===!0,this.clicked=!1;var n=this;this.element.on({blur:function(){n.blur()},focus:function(){n.focus()},click:function(){n.clicked=!0},keyup:function(e){n.keyup(e,this)}}),this.element.is('[type="checkbox"]')&&(this.element.on("change",function(){n.blur()}),this.element.parent().click(function(){setTimeout(function(){n.validate()},50)})),this.element.is(".radios-group")&&this.element.click(function(){setTimeout(function(){n.validate()},50)}),this.element.is("select")&&this.element.select2(t.select2)}var r=e("jquery"),i=e("./../core");n.prototype.blur=function(){!this.touched||""===this.getValue()&&""===this.valueWhenLastFocused||(this.sanitize(!1),this.validate())},n.prototype.focus=function(){this.valueWhenLastFocused=this.getValue(),field.touched=!0,field.element.addClass("input-touched")},n.prototype.keyup=function(){},n.prototype.cancelSubmit=function(){this.clicked=!1},n.prototype.getValidityStatus=function(){for(var e in this.validators){var t=this.validators[e],n=t.method;if(i.validators.hasOwnProperty(n)&&!i.validators[n](this,t))return t.error}return!0},n.prototype.validate=function(){var e=this.getValidityStatus();return e===!0?this.setValid():this.setInvalid(e),e===!0},n.prototype.sanitize=function(e){var t=this.getValue(),n=t;for(var r in this.sanitizers)i.sanitizers[this.sanitizers[r].method]&&(!e||this.sanitizers[r].realtime)&&(t=i.sanitizers[this.sanitizers[r].method](t,this.sanitizers[r]));n!==t&&this.setValue(t)},n.prototype.getName=function(){return this.element.attr("name")},n.prototype.hasValue=function(){return!this.isButton||this.clicked},n.prototype.getValue=function(){return this.element.val()==this.element.attr("placeholder")?"":this.element.val()},n.prototype.setValue=function(e){this.element.val(e)},n.prototype.setInvalid=function(e){this.element.removeClass("valid").addClass("invalid"),this.element.jtLink(e,["focus"],[]),this.valid=!1},n.prototype.setValid=function(){this.element.removeClass("invalid"),this.validators.length&&this.element.addClass("valid"),this.element.jtUnlink(),this.valid=!0},n.prototype.isValid=function(){return this.valid},t.exports=n},{"./../core":5,jquery:7}],4:[function(e,t){function n(e,t){this.slug=t.slug,this.submitCallback=t.submitCallback,this.hiddenFieldName=t.hiddenFieldName,this.dataFields=t.dataFields,this.element=e.data("fw-form",this),this.fields=[],this.validators=[];var n;for(n in t.fields)this.fields.push(new Field(this,t.fields[n]));for(n in t.liveValidators)this.validators.push(new Validator(this,t.liveValidators[n]));var r=this;e.on({submit:function(e){r.submit(e)}}),i.callHook("post_instantiate_form",[this])}var r=e("lodash"),i=e("./../core");n.prototype.sanitize=function(){for(var e in this.fields)this.fields[e].sanitize&&this.fields[e].sanitize(!1)},n.prototype.validate=function(){var e,t=!0;for(e in this.fields)this.fields[e].validate&&!this.fields[e].validate()&&(t=!1);if(t)for(e in this.validators)if(!this.validators[e].validate())break},n.prototype.isValid=function(){var e;for(e in this.fields)if(!this.fields[e].isValid())return!1;for(e in this.validators)if(!this.validators[e].isValid())return!1;return!0},n.prototype.submit=function(e){if(this.sanitize(),this.validate(),this.isValid()){if(""!==this.submitCallback){var t=window[this.submitCallback];"function"==typeof t&&t(e,this)}}else{e.preventDefault();var n;for(n in this.fields)this.fields[n].cancelSubmit&&this.fields[n].cancelSubmit();for(n in this.fields)if(this.fields[n].isValid&&!this.fields[n].isValid()){this.fields[n].element.focus().jtShow();break}}Fieldwork.performCallback(this.slug,Fieldwork.SUBMITCALLBACK,this,null,e)},n.prototype.getValues=function(){var e={};e[this.hiddenFieldName]="yes";for(var t in this.fields)this.fields[t].hasValue()&&(e[this.fields[t].getName()]=this.fields[t].getValue());return e},n.prototype.getFieldByName=function(e){return r.find(this.fields,function(t){return t.getName()===e})},t.exports=n},{"./../core":5,lodash:8}],5:[function(e,t){var n={AJAXCALLBACK:0,SUBMITCALLBACK:1,i:{callbacks:[]},validators:{regex:function(e,t){var n=/\/(.*)\/([igm]*)/.exec(t.pattern);return e.getValue().match(new RegExp(n[1],n[2]))},checkbox:function(e,t){return t.checked===e.element.is(":checked")},radio:function(e,t){var n=e.element.find('input[type="radio"]:checked');return n.length?t.any?!0:n.value()===t.value:!1}},formValidators:{radio:function(e,t){var n=t.inflictedFields[0];return e.element.find('[name="'+n+'"]:checked').length>0}},hooks:{post_instantiate_form:[function(e){e.element.find("[data-input-mask]").each(function(){var e=$(this),t=e.data("input-mask");e.simpleMask({mask:t})})}]},callHook:function(e,t){this.hooks.hasOwnProperty(e)&&_.each(this.hooks[e],function(e){e.apply(this,t)})},sanitizers:{uppercase:function(e){return e.toUpperCase()},lowercase:function(e){return e.toLowerCase()},capitalize:function(e){return e.replace(/(?:^|\s)\S/g,function(e){return e.toUpperCase()})},regexp:function(e,t){var n=new RegExp(t.regexp,t.regexpmod);return e.replace(n,t.replace)},iban:function(e){if(e=e.replace(/\s/g,""),!/[A-Z]{2}[0-9]{2}[A-Z]{4}/.test(e))return e;var t=e.match(/.{1,4}/g);return null===t?"":t.join(" ")}}};t.exports=n},{}],6:[function(e,t){function n(e,t){this.form=e,this.method=t.method,this.error=t.error,this.data=t,this.inflictedFields=t.inflictedFields,this.valid=!1}var r=e("./core");n.prototype.validate=function(){return this.valid=!0,r.formValidators[this.method]&&(r.formValidators[this.method](this.form,this)||(sweetAlert(this.error,"","error"),this.valid=!1)),this.valid},n.prototype.isValid=function(){return this.valid},t.exports=n},{"./core":5}],7:[function(e,t){!function(e,n){"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t=e.length,n=J.type(e);return"function"===n||J.isWindow(e)?!1:1===e.nodeType&&t?!0:"array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e}function r(e,t,n){if(J.isFunction(t))return J.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return J.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(at.test(t))return J.filter(t,e,n);t=J.filter(t,e)}return J.grep(e,function(e){return $.call(t,e)>=0!==n})}function i(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function o(e){var t=dt[e]={};return J.each(e.match(pt)||[],function(e,n){t[n]=!0}),t}function s(){Z.removeEventListener("DOMContentLoaded",s,!1),e.removeEventListener("load",s,!1),J.ready()}function a(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=J.expando+a.uid++}function l(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(wt,"-$1").toLowerCase(),n=e.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:bt.test(n)?J.parseJSON(n):n}catch(i){}yt.set(e,t,n)}else n=void 0;return n}function c(){return!0}function u(){return!1}function h(){try{return Z.activeElement}catch(e){}}function f(e,t){return J.nodeName(e,"table")&&J.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function p(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function d(e){var t=Pt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function g(e,t){for(var n=0,r=e.length;r>n;n++)mt.set(e[n],"globalEval",!t||mt.get(t[n],"globalEval"))}function v(e,t){var n,r,i,o,s,a,l,c;if(1===t.nodeType){if(mt.hasData(e)&&(o=mt.access(e),s=mt.set(t,o),c=o.events)){delete s.handle,s.events={};for(i in c)for(n=0,r=c[i].length;r>n;n++)J.event.add(t,i,c[i][n])}yt.hasData(e)&&(a=yt.access(e),l=J.extend({},a),yt.set(t,l))}}function m(e,t){var n=e.getElementsByTagName?e.getElementsByTagName(t||"*"):e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&J.nodeName(e,t)?J.merge([e],n):n}function y(e,t){var n=t.nodeName.toLowerCase();"input"===n&&St.test(e.type)?t.checked=e.checked:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}function b(t,n){var r,i=J(n.createElement(t)).appendTo(n.body),o=e.getDefaultComputedStyle&&(r=e.getDefaultComputedStyle(i[0]))?r.display:J.css(i[0],"display");return i.detach(),o}function w(e){var t=Z,n=Mt[e];return n||(n=b(e,t),"none"!==n&&n||(qt=(qt||J("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=qt[0].contentDocument,t.write(),t.close(),n=b(e,t),qt.detach()),Mt[e]=n),n}function x(e,t,n){var r,i,o,s,a=e.style;return n=n||zt(e),n&&(s=n.getPropertyValue(t)||n[t]),n&&(""!==s||J.contains(e.ownerDocument,e)||(s=J.style(e,t)),Ut.test(s)&&Wt.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function C(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function _(e,t){if(t in e)return t;for(var n=t[0].toUpperCase()+t.slice(1),r=t,i=Gt.length;i--;)if(t=Gt[i]+n,t in e)return t;return r}function S(e,t,n){var r=Vt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function T(e,t,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===t?1:0,s=0;4>o;o+=2)"margin"===n&&(s+=J.css(e,n+Ct[o],!0,i)),r?("content"===n&&(s-=J.css(e,"padding"+Ct[o],!0,i)),"margin"!==n&&(s-=J.css(e,"border"+Ct[o]+"Width",!0,i))):(s+=J.css(e,"padding"+Ct[o],!0,i),"padding"!==n&&(s+=J.css(e,"border"+Ct[o]+"Width",!0,i)));return s}function E(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=zt(e),s="border-box"===J.css(e,"boxSizing",!1,o);if(0>=i||null==i){if(i=x(e,t,o),(0>i||null==i)&&(i=e.style[t]),Ut.test(i))return i;r=s&&(Y.boxSizingReliable()||i===e.style[t]),i=parseFloat(i)||0}return i+T(e,t,n||(s?"border":"content"),r,o)+"px"}function k(e,t){for(var n,r,i,o=[],s=0,a=e.length;a>s;s++)r=e[s],r.style&&(o[s]=mt.get(r,"olddisplay"),n=r.style.display,t?(o[s]||"none"!==n||(r.style.display=""),""===r.style.display&&_t(r)&&(o[s]=mt.access(r,"olddisplay",w(r.nodeName)))):(i=_t(r),"none"===n&&i||mt.set(r,"olddisplay",i?n:J.css(r,"display"))));for(s=0;a>s;s++)r=e[s],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[s]||"":"none"));return e}function A(e,t,n,r,i){return new A.prototype.init(e,t,n,r,i)}function j(){return setTimeout(function(){Yt=void 0}),Yt=J.now()}function N(e,t){var n,r=0,i={height:e};for(t=t?1:0;4>r;r+=2-t)n=Ct[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function O(e,t,n){for(var r,i=(nn[t]||[]).concat(nn["*"]),o=0,s=i.length;s>o;o++)if(r=i[o].call(n,t,e))return r}function D(e,t,n){var r,i,o,s,a,l,c,u,h=this,f={},p=e.style,d=e.nodeType&&_t(e),g=mt.get(e,"fxshow");n.queue||(a=J._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,h.always(function(){h.always(function(){a.unqueued--,J.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],c=J.css(e,"display"),u="none"===c?mt.get(e,"olddisplay")||w(e.nodeName):c,"inline"===u&&"none"===J.css(e,"float")&&(p.display="inline-block")),n.overflow&&(p.overflow="hidden",h.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],Qt.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(d?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;d=!0}f[r]=g&&g[r]||J.style(e,r)}else c=void 0;if(J.isEmptyObject(f))"inline"===("none"===c?w(e.nodeName):c)&&(p.display=c);else{g?"hidden"in g&&(d=g.hidden):g=mt.access(e,"fxshow",{}),o&&(g.hidden=!d),d?J(e).show():h.done(function(){J(e).hide()}),h.done(function(){var t;mt.remove(e,"fxshow");for(t in f)J.style(e,t,f[t])});for(r in f)s=O(d?g[r]:0,r,h),r in g||(g[r]=s.start,d&&(s.end=s.start,s.start="width"===r||"height"===r?1:0))}}function I(e,t){var n,r,i,o,s;for(n in e)if(r=J.camelCase(n),i=t[r],o=e[n],J.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),s=J.cssHooks[r],s&&"expand"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function R(e,t,n){var r,i,o=0,s=tn.length,a=J.Deferred().always(function(){delete l.elem}),l=function(){if(i)return!1;for(var t=Yt||j(),n=Math.max(0,c.startTime+c.duration-t),r=n/c.duration||0,o=1-r,s=0,l=c.tweens.length;l>s;s++)c.tweens[s].run(o);return a.notifyWith(e,[c,o,n]),1>o&&l?n:(a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:J.extend({},t),opts:J.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:Yt||j(),duration:n.duration,tweens:[],createTween:function(t,n){var r=J.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)c.tweens[n].run(1);return t?a.resolveWith(e,[c,t]):a.rejectWith(e,[c,t]),this}}),u=c.props;for(I(u,c.opts.specialEasing);s>o;o++)if(r=tn[o].call(c,e,u,c.opts))return r;return J.map(u,O,c),J.isFunction(c.opts.start)&&c.opts.start.call(e,c),J.fx.timer(J.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function L(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(pt)||[];if(J.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function P(e,t,n,r){function i(a){var l;return o[a]=!0,J.each(e[a]||[],function(e,a){var c=a(t,n,r);return"string"!=typeof c||s||o[c]?s?!(l=c):void 0:(t.dataTypes.unshift(c),i(c),!1)}),l}var o={},s=e===wn;return i(t.dataTypes[0])||!o["*"]&&i("*")}function F(e,t){var n,r,i=J.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&J.extend(!0,e,r),e}function H(e,t,n){for(var r,i,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){o=i;break}s||(s=i)}o=o||s}return o?(o!==l[0]&&l.unshift(o),n[o]):void 0}function q(e,t,n,r){var i,o,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(s=c[l+" "+o]||c["* "+o],!s)for(i in c)if(a=i.split(" "),a[1]===o&&(s=c[l+" "+a[0]]||c["* "+a[0]])){s===!0?s=c[i]:c[i]!==!0&&(o=a[0],u.unshift(a[1]));break}if(s!==!0)if(s&&e["throws"])t=s(t);else try{t=s(t)}catch(h){return{state:"parsererror",error:s?h:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}function M(e,t,n,r){var i;if(J.isArray(t))J.each(t,function(t,i){n||Tn.test(e)?r(e,i):M(e+"["+("object"==typeof i?t:"")+"]",i,n,r)});else if(n||"object"!==J.type(t))r(e,t);else for(i in t)M(e+"["+i+"]",t[i],n,r)}function W(e){return J.isWindow(e)?e:9===e.nodeType&&e.defaultView}var U=[],z=U.slice,B=U.concat,V=U.push,$=U.indexOf,K={},X=K.toString,G=K.hasOwnProperty,Y={},Z=e.document,Q="2.1.3",J=function(e,t){return new J.fn.init(e,t)},et=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,tt=/^-ms-/,nt=/-([\da-z])/gi,rt=function(e,t){return t.toUpperCase()};J.fn=J.prototype={jquery:Q,constructor:J,selector:"",length:0,toArray:function(){return z.call(this)},get:function(e){return null!=e?0>e?this[e+this.length]:this[e]:z.call(this)},pushStack:function(e){var t=J.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return J.each(this,e,t)},map:function(e){return this.pushStack(J.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(z.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:V,sort:U.sort,splice:U.splice},J.extend=J.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||J.isFunction(s)||(s={}),a===l&&(s=this,a--);l>a;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],r=e[t],s!==r&&(c&&r&&(J.isPlainObject(r)||(i=J.isArray(r)))?(i?(i=!1,o=n&&J.isArray(n)?n:[]):o=n&&J.isPlainObject(n)?n:{},s[t]=J.extend(c,o,r)):void 0!==r&&(s[t]=r));return s},J.extend({expando:"jQuery"+(Q+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===J.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){return!J.isArray(e)&&e-parseFloat(e)+1>=0},isPlainObject:function(e){return"object"!==J.type(e)||e.nodeType||J.isWindow(e)?!1:e.constructor&&!G.call(e.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?K[X.call(e)]||"object":typeof e},globalEval:function(e){var t,n=eval;e=J.trim(e),e&&(1===e.indexOf("use strict")?(t=Z.createElement("script"),t.text=e,Z.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(tt,"ms-").replace(nt,rt)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,r){var i,o=0,s=e.length,a=n(e);if(r){if(a)for(;s>o&&(i=t.apply(e[o],r),i!==!1);o++);else for(o in e)if(i=t.apply(e[o],r),i===!1)break}else if(a)for(;s>o&&(i=t.call(e[o],o,e[o]),i!==!1);o++);else for(o in e)if(i=t.call(e[o],o,e[o]),i===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(et,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(n(Object(e))?J.merge(r,"string"==typeof e?[e]:e):V.call(r,e)),r},inArray:function(e,t,n){return null==t?-1:$.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;n>r;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,s=e.length,a=!n;s>o;o++)r=!t(e[o],o),r!==a&&i.push(e[o]);return i},map:function(e,t,r){var i,o=0,s=e.length,a=n(e),l=[];if(a)for(;s>o;o++)i=t(e[o],o,r),null!=i&&l.push(i);else for(o in e)i=t(e[o],o,r),null!=i&&l.push(i);return B.apply([],l)},guid:1,proxy:function(e,t){var n,r,i;return"string"==typeof t&&(n=e[t],t=e,e=n),J.isFunction(e)?(r=z.call(arguments,2),i=function(){return e.apply(t||this,r.concat(z.call(arguments)))},i.guid=e.guid=e.guid||J.guid++,i):void 0},now:Date.now,support:Y}),J.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){K["[object "+t+"]"]=t.toLowerCase()});var it=function(e){function t(e,t,n,r){var i,o,s,a,l,c,h,p,d,g;if((t?t.ownerDocument||t:M)!==D&&O(t),t=t||D,n=n||[],a=t.nodeType,"string"!=typeof e||!e||1!==a&&9!==a&&11!==a)return n;if(!r&&R){if(11!==a&&(i=yt.exec(e)))if(s=i[1]){if(9===a){if(o=t.getElementById(s),!o||!o.parentNode)return n;if(o.id===s)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(s))&&H(t,o)&&o.id===s)return n.push(o),n}else{if(i[2])return Q.apply(n,t.getElementsByTagName(e)),n;if((s=i[3])&&x.getElementsByClassName)return Q.apply(n,t.getElementsByClassName(s)),n}if(x.qsa&&(!L||!L.test(e))){if(p=h=q,d=t,g=1!==a&&e,1===a&&"object"!==t.nodeName.toLowerCase()){for(c=T(e),(h=t.getAttribute("id"))?p=h.replace(wt,"\\$&"):t.setAttribute("id",p),p="[id='"+p+"'] ",l=c.length;l--;)c[l]=p+f(c[l]);d=bt.test(e)&&u(t.parentNode)||t,g=c.join(",")}if(g)try{return Q.apply(n,d.querySelectorAll(g)),n}catch(v){}finally{h||t.removeAttribute("id")}}}return k(e.replace(lt,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>C.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[q]=!0,e}function i(e){var t=D.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=e.length;r--;)C.attrHandle[n[r]]=t}function s(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||K)-(~e.sourceIndex||K);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function l(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function c(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function u(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function h(){}function f(e){for(var t=0,n=e.length,r="";n>t;t++)r+=e[t].value;return r}function p(e,t,n){var r=t.dir,i=n&&"parentNode"===r,o=U++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,s){var a,l,c=[W,o];if(s){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,s))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(l=t[q]||(t[q]={}),(a=l[r])&&a[0]===W&&a[1]===o)return c[2]=a[2];if(l[r]=c,c[2]=e(t,n,s))return!0}}}function d(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function g(e,n,r){for(var i=0,o=n.length;o>i;i++)t(e,n[i],r);return r}function v(e,t,n,r,i){for(var o,s=[],a=0,l=e.length,c=null!=t;l>a;a++)(o=e[a])&&(!n||n(o,r,i))&&(s.push(o),c&&t.push(a));return s}function m(e,t,n,i,o,s){return i&&!i[q]&&(i=m(i)),o&&!o[q]&&(o=m(o,s)),r(function(r,s,a,l){var c,u,h,f=[],p=[],d=s.length,m=r||g(t||"*",a.nodeType?[a]:a,[]),y=!e||!r&&t?m:v(m,f,e,a,l),b=n?o||(r?e:d||i)?[]:s:y;if(n&&n(y,b,a,l),i)for(c=v(b,p),i(c,[],a,l),u=c.length;u--;)(h=c[u])&&(b[p[u]]=!(y[p[u]]=h));if(r){if(o||e){if(o){for(c=[],u=b.length;u--;)(h=b[u])&&c.push(y[u]=h);o(null,b=[],c,l)}for(u=b.length;u--;)(h=b[u])&&(c=o?et(r,h):f[u])>-1&&(r[c]=!(s[c]=h))}}else b=v(b===s?b.splice(d,b.length):b),o?o(null,s,b,l):Q.apply(s,b)})}function y(e){for(var t,n,r,i=e.length,o=C.relative[e[0].type],s=o||C.relative[" "],a=o?1:0,l=p(function(e){return e===t},s,!0),c=p(function(e){return et(t,e)>-1},s,!0),u=[function(e,n,r){var i=!o&&(r||n!==A)||((t=n).nodeType?l(e,n,r):c(e,n,r));return t=null,i}];i>a;a++)if(n=C.relative[e[a].type])u=[p(d(u),n)];else{if(n=C.filter[e[a].type].apply(null,e[a].matches),n[q]){for(r=++a;i>r&&!C.relative[e[r].type];r++);return m(a>1&&d(u),a>1&&f(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(lt,"$1"),n,r>a&&y(e.slice(a,r)),i>r&&y(e=e.slice(r)),i>r&&f(e))}u.push(n)}return d(u)}function b(e,n){var i=n.length>0,o=e.length>0,s=function(r,s,a,l,c){var u,h,f,p=0,d="0",g=r&&[],m=[],y=A,b=r||o&&C.find.TAG("*",c),w=W+=null==y?1:Math.random()||.1,x=b.length;for(c&&(A=s!==D&&s);d!==x&&null!=(u=b[d]);d++){if(o&&u){for(h=0;f=e[h++];)if(f(u,s,a)){l.push(u);break}c&&(W=w)}i&&((u=!f&&u)&&p--,r&&g.push(u))}if(p+=d,i&&d!==p){for(h=0;f=n[h++];)f(g,m,s,a);if(r){if(p>0)for(;d--;)g[d]||m[d]||(m[d]=Y.call(l));m=v(m)}Q.apply(l,m),c&&!r&&m.length>0&&p+n.length>1&&t.uniqueSort(l)}return c&&(W=w,A=y),g};return i?r(s):s}var w,x,C,_,S,T,E,k,A,j,N,O,D,I,R,L,P,F,H,q="sizzle"+1*new Date,M=e.document,W=0,U=0,z=n(),B=n(),V=n(),$=function(e,t){return e===t&&(N=!0),0},K=1<<31,X={}.hasOwnProperty,G=[],Y=G.pop,Z=G.push,Q=G.push,J=G.slice,et=function(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1},tt="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",rt="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",it=rt.replace("w","w#"),ot="\\["+nt+"*("+rt+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+it+"))|)"+nt+"*\\]",st=":("+rt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ot+")*)|.*)\\)|)",at=new RegExp(nt+"+","g"),lt=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),ct=new RegExp("^"+nt+"*,"+nt+"*"),ut=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),ht=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),ft=new RegExp(st),pt=new RegExp("^"+it+"$"),dt={ID:new RegExp("^#("+rt+")"),CLASS:new RegExp("^\\.("+rt+")"),TAG:new RegExp("^("+rt.replace("w","w*")+")"),ATTR:new RegExp("^"+ot),PSEUDO:new RegExp("^"+st),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+tt+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},gt=/^(?:input|select|textarea|button)$/i,vt=/^h\d$/i,mt=/^[^{]+\{\s*\[native \w/,yt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,bt=/[+~]/,wt=/'|\\/g,xt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),Ct=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},_t=function(){O()};try{Q.apply(G=J.call(M.childNodes),M.childNodes),G[M.childNodes.length].nodeType}catch(St){Q={apply:G.length?function(e,t){Z.apply(e,J.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}x=t.support={},S=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},O=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:M;return r!==D&&9===r.nodeType&&r.documentElement?(D=r,I=r.documentElement,n=r.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",_t,!1):n.attachEvent&&n.attachEvent("onunload",_t)),R=!S(r),x.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=i(function(e){return e.appendChild(r.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=mt.test(r.getElementsByClassName),x.getById=i(function(e){return I.appendChild(e).id=q,!r.getElementsByName||!r.getElementsByName(q).length}),x.getById?(C.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&R){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},C.filter.ID=function(e){var t=e.replace(xt,Ct);return function(e){return e.getAttribute("id")===t}}):(delete C.find.ID,C.filter.ID=function(e){var t=e.replace(xt,Ct);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),C.find.TAG=x.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},C.find.CLASS=x.getElementsByClassName&&function(e,t){return R?t.getElementsByClassName(e):void 0},P=[],L=[],(x.qsa=mt.test(r.querySelectorAll))&&(i(function(e){I.appendChild(e).innerHTML="<a id='"+q+"'></a><select id='"+q+"-\f]' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&L.push("[*^$]="+nt+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||L.push("\\["+nt+"*(?:value|"+tt+")"),e.querySelectorAll("[id~="+q+"-]").length||L.push("~="),e.querySelectorAll(":checked").length||L.push(":checked"),e.querySelectorAll("a#"+q+"+*").length||L.push(".#.+[+~]")}),i(function(e){var t=r.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&L.push("name"+nt+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||L.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),L.push(",.*:")})),(x.matchesSelector=mt.test(F=I.matches||I.webkitMatchesSelector||I.mozMatchesSelector||I.oMatchesSelector||I.msMatchesSelector))&&i(function(e){x.disconnectedMatch=F.call(e,"div"),F.call(e,"[s!='']:x"),P.push("!=",st)}),L=L.length&&new RegExp(L.join("|")),P=P.length&&new RegExp(P.join("|")),t=mt.test(I.compareDocumentPosition),H=t||mt.test(I.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},$=t?function(e,t){if(e===t)return N=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===r||e.ownerDocument===M&&H(M,e)?-1:t===r||t.ownerDocument===M&&H(M,t)?1:j?et(j,e)-et(j,t):0:4&n?-1:1)}:function(e,t){if(e===t)return N=!0,0;var n,i=0,o=e.parentNode,a=t.parentNode,l=[e],c=[t];if(!o||!a)return e===r?-1:t===r?1:o?-1:a?1:j?et(j,e)-et(j,t):0;if(o===a)return s(e,t);for(n=e;n=n.parentNode;)l.unshift(n);for(n=t;n=n.parentNode;)c.unshift(n);for(;l[i]===c[i];)i++;return i?s(l[i],c[i]):l[i]===M?-1:c[i]===M?1:0},r):D},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==D&&O(e),n=n.replace(ht,"='$1']"),!(!x.matchesSelector||!R||P&&P.test(n)||L&&L.test(n)))try{var r=F.call(e,n);
if(r||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return t(n,D,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==D&&O(e),H(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==D&&O(e);var n=C.attrHandle[t.toLowerCase()],r=n&&X.call(C.attrHandle,t.toLowerCase())?n(e,t,!R):void 0;return void 0!==r?r:x.attributes||!R?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(N=!x.detectDuplicates,j=!x.sortStable&&e.slice(0),e.sort($),N){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return j=null,e},_=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=_(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=_(t);return n},C=t.selectors={cacheLength:50,createPseudo:r,match:dt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(xt,Ct),e[3]=(e[3]||e[4]||e[5]||"").replace(xt,Ct),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return dt.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ft.test(n)&&(t=T(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(xt,Ct).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=z[e+" "];return t||(t=new RegExp("(^|"+nt+")"+e+"("+nt+"|$)"))&&z(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:n?(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(at," ")+" ").indexOf(r)>-1:"|="===n?o===r||o.slice(0,r.length+1)===r+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var c,u,h,f,p,d,g=o!==s?"nextSibling":"previousSibling",v=t.parentNode,m=a&&t.nodeName.toLowerCase(),y=!l&&!a;if(v){if(o){for(;g;){for(h=t;h=h[g];)if(a?h.nodeName.toLowerCase()===m:1===h.nodeType)return!1;d=g="only"===e&&!d&&"nextSibling"}return!0}if(d=[s?v.firstChild:v.lastChild],s&&y){for(u=v[q]||(v[q]={}),c=u[e]||[],p=c[0]===W&&c[1],f=c[0]===W&&c[2],h=p&&v.childNodes[p];h=++p&&h&&h[g]||(f=p=0)||d.pop();)if(1===h.nodeType&&++f&&h===t){u[e]=[W,p,f];break}}else if(y&&(c=(t[q]||(t[q]={}))[e])&&c[0]===W)f=c[1];else for(;(h=++p&&h&&h[g]||(f=p=0)||d.pop())&&((a?h.nodeName.toLowerCase()!==m:1!==h.nodeType)||!++f||(y&&((h[q]||(h[q]={}))[e]=[W,f]),h!==t)););return f-=i,f===r||f%r===0&&f/r>=0}}},PSEUDO:function(e,n){var i,o=C.pseudos[e]||C.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[q]?o(n):o.length>1?(i=[e,e,"",n],C.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),s=i.length;s--;)r=et(e,i[s]),e[r]=!(t[r]=i[s])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=E(e.replace(lt,"$1"));return i[q]?r(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(xt,Ct),function(t){return(t.textContent||t.innerText||_(t)).indexOf(e)>-1}}),lang:r(function(e){return pt.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(xt,Ct).toLowerCase(),function(t){var n;do if(n=R?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===I},focus:function(e){return e===D.activeElement&&(!D.hasFocus||D.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!C.pseudos.empty(e)},header:function(e){return vt.test(e.nodeName)},input:function(e){return gt.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:c(function(){return[0]}),last:c(function(e,t){return[t-1]}),eq:c(function(e,t,n){return[0>n?n+t:n]}),even:c(function(e,t){for(var n=0;t>n;n+=2)e.push(n);return e}),odd:c(function(e,t){for(var n=1;t>n;n+=2)e.push(n);return e}),lt:c(function(e,t,n){for(var r=0>n?n+t:n;--r>=0;)e.push(r);return e}),gt:c(function(e,t,n){for(var r=0>n?n+t:n;++r<t;)e.push(r);return e})}},C.pseudos.nth=C.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})C.pseudos[w]=a(w);for(w in{submit:!0,reset:!0})C.pseudos[w]=l(w);return h.prototype=C.filters=C.pseudos,C.setFilters=new h,T=t.tokenize=function(e,n){var r,i,o,s,a,l,c,u=B[e+" "];if(u)return n?0:u.slice(0);for(a=e,l=[],c=C.preFilter;a;){(!r||(i=ct.exec(a)))&&(i&&(a=a.slice(i[0].length)||a),l.push(o=[])),r=!1,(i=ut.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(lt," ")}),a=a.slice(r.length));for(s in C.filter)!(i=dt[s].exec(a))||c[s]&&!(i=c[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?t.error(e):B(e,l).slice(0)},E=t.compile=function(e,t){var n,r=[],i=[],o=V[e+" "];if(!o){for(t||(t=T(e)),n=t.length;n--;)o=y(t[n]),o[q]?r.push(o):i.push(o);o=V(e,b(i,r)),o.selector=e}return o},k=t.select=function(e,t,n,r){var i,o,s,a,l,c="function"==typeof e&&e,h=!r&&T(e=c.selector||e);if(n=n||[],1===h.length){if(o=h[0]=h[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&x.getById&&9===t.nodeType&&R&&C.relative[o[1].type]){if(t=(C.find.ID(s.matches[0].replace(xt,Ct),t)||[])[0],!t)return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=dt.needsContext.test(e)?0:o.length;i--&&(s=o[i],!C.relative[a=s.type]);)if((l=C.find[a])&&(r=l(s.matches[0].replace(xt,Ct),bt.test(o[0].type)&&u(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&f(o),!e)return Q.apply(n,r),n;break}}return(c||E(e,h))(r,t,!R,n,bt.test(e)&&u(t.parentNode)||t),n},x.sortStable=q.split("").sort($).join("")===q,x.detectDuplicates=!!N,O(),x.sortDetached=i(function(e){return 1&e.compareDocumentPosition(D.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){return n?void 0:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(tt,function(e,t,n){var r;return n?void 0:e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);J.find=it,J.expr=it.selectors,J.expr[":"]=J.expr.pseudos,J.unique=it.uniqueSort,J.text=it.getText,J.isXMLDoc=it.isXML,J.contains=it.contains;var ot=J.expr.match.needsContext,st=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,at=/^.[^:#\[\.,]*$/;J.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?J.find.matchesSelector(r,e)?[r]:[]:J.find.matches(e,J.grep(t,function(e){return 1===e.nodeType}))},J.fn.extend({find:function(e){var t,n=this.length,r=[],i=this;if("string"!=typeof e)return this.pushStack(J(e).filter(function(){for(t=0;n>t;t++)if(J.contains(i[t],this))return!0}));for(t=0;n>t;t++)J.find(e,i[t],r);return r=this.pushStack(n>1?J.unique(r):r),r.selector=this.selector?this.selector+" "+e:e,r},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&ot.test(e)?J(e):e||[],!1).length}});var lt,ct=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ut=J.fn.init=function(e,t){var n,r;if(!e)return this;if("string"==typeof e){if(n="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:ct.exec(e),!n||!n[1]&&t)return!t||t.jquery?(t||lt).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof J?t[0]:t,J.merge(this,J.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:Z,!0)),st.test(n[1])&&J.isPlainObject(t))for(n in t)J.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return r=Z.getElementById(n[2]),r&&r.parentNode&&(this.length=1,this[0]=r),this.context=Z,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):J.isFunction(e)?"undefined"!=typeof lt.ready?lt.ready(e):e(J):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),J.makeArray(e,this))};ut.prototype=J.fn,lt=J(Z);var ht=/^(?:parents|prev(?:Until|All))/,ft={children:!0,contents:!0,next:!0,prev:!0};J.extend({dir:function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&J(e).is(n))break;r.push(e)}return r},sibling:function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}}),J.fn.extend({has:function(e){var t=J(e,this),n=t.length;return this.filter(function(){for(var e=0;n>e;e++)if(J.contains(this,t[e]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,o=[],s=ot.test(e)||"string"!=typeof e?J(e,t||this.context):0;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&J.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?J.unique(o):o)},index:function(e){return e?"string"==typeof e?$.call(J(e),this[0]):$.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(J.unique(J.merge(this.get(),J(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),J.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return J.dir(e,"parentNode")},parentsUntil:function(e,t,n){return J.dir(e,"parentNode",n)},next:function(e){return i(e,"nextSibling")},prev:function(e){return i(e,"previousSibling")},nextAll:function(e){return J.dir(e,"nextSibling")},prevAll:function(e){return J.dir(e,"previousSibling")},nextUntil:function(e,t,n){return J.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return J.dir(e,"previousSibling",n)},siblings:function(e){return J.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return J.sibling(e.firstChild)},contents:function(e){return e.contentDocument||J.merge([],e.childNodes)}},function(e,t){J.fn[e]=function(n,r){var i=J.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=J.filter(r,i)),this.length>1&&(ft[e]||J.unique(i),ht.test(e)&&i.reverse()),this.pushStack(i)}});var pt=/\S+/g,dt={};J.Callbacks=function(e){e="string"==typeof e?dt[e]||o(e):J.extend({},e);var t,n,r,i,s,a,l=[],c=!e.once&&[],u=function(o){for(t=e.memory&&o,n=!0,a=i||0,i=0,s=l.length,r=!0;l&&s>a;a++)if(l[a].apply(o[0],o[1])===!1&&e.stopOnFalse){t=!1;break}r=!1,l&&(c?c.length&&u(c.shift()):t?l=[]:h.disable())},h={add:function(){if(l){var n=l.length;!function o(t){J.each(t,function(t,n){var r=J.type(n);"function"===r?e.unique&&h.has(n)||l.push(n):n&&n.length&&"string"!==r&&o(n)})}(arguments),r?s=l.length:t&&(i=n,u(t))}return this},remove:function(){return l&&J.each(arguments,function(e,t){for(var n;(n=J.inArray(t,l,n))>-1;)l.splice(n,1),r&&(s>=n&&s--,a>=n&&a--)}),this},has:function(e){return e?J.inArray(e,l)>-1:!(!l||!l.length)},empty:function(){return l=[],s=0,this},disable:function(){return l=c=t=void 0,this},disabled:function(){return!l},lock:function(){return c=void 0,t||h.disable(),this},locked:function(){return!c},fireWith:function(e,t){return!l||n&&!c||(t=t||[],t=[e,t.slice?t.slice():t],r?c.push(t):u(t)),this},fire:function(){return h.fireWith(this,arguments),this},fired:function(){return!!n}};return h},J.extend({Deferred:function(e){var t=[["resolve","done",J.Callbacks("once memory"),"resolved"],["reject","fail",J.Callbacks("once memory"),"rejected"],["notify","progress",J.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return J.Deferred(function(n){J.each(t,function(t,o){var s=J.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&J.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[o[0]+"With"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?J.extend(e,r):r}},i={};return r.pipe=r.then,J.each(t,function(e,o){var s=o[2],a=o[3];r[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=s.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,i=0,o=z.call(arguments),s=o.length,a=1!==s||e&&J.isFunction(e.promise)?s:0,l=1===a?e:J.Deferred(),c=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length>1?z.call(arguments):i,r===t?l.notifyWith(n,r):--a||l.resolveWith(n,r)}};if(s>1)for(t=new Array(s),n=new Array(s),r=new Array(s);s>i;i++)o[i]&&J.isFunction(o[i].promise)?o[i].promise().done(c(i,r,o)).fail(l.reject).progress(c(i,n,t)):--a;return a||l.resolveWith(r,o),l.promise()}});var gt;J.fn.ready=function(e){return J.ready.promise().done(e),this},J.extend({isReady:!1,readyWait:1,holdReady:function(e){e?J.readyWait++:J.ready(!0)},ready:function(e){(e===!0?--J.readyWait:J.isReady)||(J.isReady=!0,e!==!0&&--J.readyWait>0||(gt.resolveWith(Z,[J]),J.fn.triggerHandler&&(J(Z).triggerHandler("ready"),J(Z).off("ready"))))}}),J.ready.promise=function(t){return gt||(gt=J.Deferred(),"complete"===Z.readyState?setTimeout(J.ready):(Z.addEventListener("DOMContentLoaded",s,!1),e.addEventListener("load",s,!1))),gt.promise(t)},J.ready.promise();var vt=J.access=function(e,t,n,r,i,o,s){var a=0,l=e.length,c=null==n;if("object"===J.type(n)){i=!0;for(a in n)J.access(e,t,a,n[a],!0,o,s)}else if(void 0!==r&&(i=!0,J.isFunction(r)||(s=!0),c&&(s?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(J(e),n)})),t))for(;l>a;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:c?t.call(e):l?t(e[0],n):o};J.acceptData=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType},a.uid=1,a.accepts=J.acceptData,a.prototype={key:function(e){if(!a.accepts(e))return 0;var t={},n=e[this.expando];if(!n){n=a.uid++;try{t[this.expando]={value:n},Object.defineProperties(e,t)}catch(r){t[this.expando]=n,J.extend(e,t)}}return this.cache[n]||(this.cache[n]={}),n},set:function(e,t,n){var r,i=this.key(e),o=this.cache[i];if("string"==typeof t)o[t]=n;else if(J.isEmptyObject(o))J.extend(this.cache[i],t);else for(r in t)o[r]=t[r];return o},get:function(e,t){var n=this.cache[this.key(e)];return void 0===t?n:n[t]},access:function(e,t,n){var r;return void 0===t||t&&"string"==typeof t&&void 0===n?(r=this.get(e,t),void 0!==r?r:this.get(e,J.camelCase(t))):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r,i,o=this.key(e),s=this.cache[o];if(void 0===t)this.cache[o]={};else{J.isArray(t)?r=t.concat(t.map(J.camelCase)):(i=J.camelCase(t),t in s?r=[t,i]:(r=i,r=r in s?[r]:r.match(pt)||[])),n=r.length;for(;n--;)delete s[r[n]]}},hasData:function(e){return!J.isEmptyObject(this.cache[e[this.expando]]||{})},discard:function(e){e[this.expando]&&delete this.cache[e[this.expando]]}};var mt=new a,yt=new a,bt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,wt=/([A-Z])/g;J.extend({hasData:function(e){return yt.hasData(e)||mt.hasData(e)},data:function(e,t,n){return yt.access(e,t,n)},removeData:function(e,t){yt.remove(e,t)},_data:function(e,t,n){return mt.access(e,t,n)},_removeData:function(e,t){mt.remove(e,t)}}),J.fn.extend({data:function(e,t){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=yt.get(o),1===o.nodeType&&!mt.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(r=s[n].name,0===r.indexOf("data-")&&(r=J.camelCase(r.slice(5)),l(o,r,i[r])));mt.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){yt.set(this,e)}):vt(this,function(t){var n,r=J.camelCase(e);if(o&&void 0===t){if(n=yt.get(o,e),void 0!==n)return n;if(n=yt.get(o,r),void 0!==n)return n;if(n=l(o,r,void 0),void 0!==n)return n}else this.each(function(){var n=yt.get(this,r);yt.set(this,r,t),-1!==e.indexOf("-")&&void 0!==n&&yt.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){yt.remove(this,e)})}}),J.extend({queue:function(e,t,n){var r;return e?(t=(t||"fx")+"queue",r=mt.get(e,t),n&&(!r||J.isArray(n)?r=mt.access(e,t,J.makeArray(n)):r.push(n)),r||[]):void 0},dequeue:function(e,t){t=t||"fx";var n=J.queue(e,t),r=n.length,i=n.shift(),o=J._queueHooks(e,t),s=function(){J.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return mt.get(e,n)||mt.access(e,n,{empty:J.Callbacks("once memory").add(function(){mt.remove(e,[t+"queue",n])})})}}),J.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?J.queue(this[0],e):void 0===t?this:this.each(function(){var n=J.queue(this,e,t);J._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&J.dequeue(this,e)})},dequeue:function(e){return this.each(function(){J.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=J.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)n=mt.get(o[s],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var xt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ct=["Top","Right","Bottom","Left"],_t=function(e,t){return e=t||e,"none"===J.css(e,"display")||!J.contains(e.ownerDocument,e)},St=/^(?:checkbox|radio)$/i;!function(){var e=Z.createDocumentFragment(),t=e.appendChild(Z.createElement("div")),n=Z.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),Y.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",Y.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Tt="undefined";Y.focusinBubbles="onfocusin"in e;var Et=/^key/,kt=/^(?:mouse|pointer|contextmenu)|click/,At=/^(?:focusinfocus|focusoutblur)$/,jt=/^([^.]*)(?:\.(.+)|)$/;J.event={global:{},add:function(e,t,n,r,i){var o,s,a,l,c,u,h,f,p,d,g,v=mt.get(e);if(v)for(n.handler&&(o=n,n=o.handler,i=o.selector),n.guid||(n.guid=J.guid++),(l=v.events)||(l=v.events={}),(s=v.handle)||(s=v.handle=function(t){return typeof J!==Tt&&J.event.triggered!==t.type?J.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(pt)||[""],c=t.length;c--;)a=jt.exec(t[c])||[],p=g=a[1],d=(a[2]||"").split(".").sort(),p&&(h=J.event.special[p]||{},p=(i?h.delegateType:h.bindType)||p,h=J.event.special[p]||{},u=J.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&J.expr.match.needsContext.test(i),namespace:d.join(".")},o),(f=l[p])||(f=l[p]=[],f.delegateCount=0,h.setup&&h.setup.call(e,r,d,s)!==!1||e.addEventListener&&e.addEventListener(p,s,!1)),h.add&&(h.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),i?f.splice(f.delegateCount++,0,u):f.push(u),J.event.global[p]=!0)},remove:function(e,t,n,r,i){var o,s,a,l,c,u,h,f,p,d,g,v=mt.hasData(e)&&mt.get(e);if(v&&(l=v.events)){for(t=(t||"").match(pt)||[""],c=t.length;c--;)if(a=jt.exec(t[c])||[],p=g=a[1],d=(a[2]||"").split(".").sort(),p){for(h=J.event.special[p]||{},p=(r?h.delegateType:h.bindType)||p,f=l[p]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=f.length;o--;)u=f[o],!i&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||r&&r!==u.selector&&("**"!==r||!u.selector)||(f.splice(o,1),u.selector&&f.delegateCount--,h.remove&&h.remove.call(e,u));s&&!f.length&&(h.teardown&&h.teardown.call(e,d,v.handle)!==!1||J.removeEvent(e,p,v.handle),delete l[p])}else for(p in l)J.event.remove(e,p+t[c],n,r,!0);J.isEmptyObject(l)&&(delete v.handle,mt.remove(e,"events"))}},trigger:function(t,n,r,i){var o,s,a,l,c,u,h,f=[r||Z],p=G.call(t,"type")?t.type:t,d=G.call(t,"namespace")?t.namespace.split("."):[];if(s=a=r=r||Z,3!==r.nodeType&&8!==r.nodeType&&!At.test(p+J.event.triggered)&&(p.indexOf(".")>=0&&(d=p.split("."),p=d.shift(),d.sort()),c=p.indexOf(":")<0&&"on"+p,t=t[J.expando]?t:new J.Event(p,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=d.join("."),t.namespace_re=t.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:J.makeArray(n,[t]),h=J.event.special[p]||{},i||!h.trigger||h.trigger.apply(r,n)!==!1)){if(!i&&!h.noBubble&&!J.isWindow(r)){for(l=h.delegateType||p,At.test(l+p)||(s=s.parentNode);s;s=s.parentNode)f.push(s),a=s;a===(r.ownerDocument||Z)&&f.push(a.defaultView||a.parentWindow||e)}for(o=0;(s=f[o++])&&!t.isPropagationStopped();)t.type=o>1?l:h.bindType||p,u=(mt.get(s,"events")||{})[t.type]&&mt.get(s,"handle"),u&&u.apply(s,n),u=c&&s[c],u&&u.apply&&J.acceptData(s)&&(t.result=u.apply(s,n),t.result===!1&&t.preventDefault());return t.type=p,i||t.isDefaultPrevented()||h._default&&h._default.apply(f.pop(),n)!==!1||!J.acceptData(r)||c&&J.isFunction(r[p])&&!J.isWindow(r)&&(a=r[c],a&&(r[c]=null),J.event.triggered=p,r[p](),J.event.triggered=void 0,a&&(r[c]=a)),t.result}},dispatch:function(e){e=J.event.fix(e);var t,n,r,i,o,s=[],a=z.call(arguments),l=(mt.get(this,"events")||{})[e.type]||[],c=J.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,e)!==!1){for(s=J.event.handlers.call(this,e,l),t=0;(i=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!e.isImmediatePropagationStopped();)(!e.namespace_re||e.namespace_re.test(o.namespace))&&(e.handleObj=o,e.data=o.data,r=((J.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,a),void 0!==r&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,s=[],a=t.delegateCount,l=e.target;if(a&&l.nodeType&&(!e.button||"click"!==e.type))for(;l!==this;l=l.parentNode||this)if(l.disabled!==!0||"click"!==e.type){for(r=[],n=0;a>n;n++)o=t[n],i=o.selector+" ",void 0===r[i]&&(r[i]=o.needsContext?J(i,this).index(l)>=0:J.find(i,this,null,[l]).length),r[i]&&r.push(o);r.length&&s.push({elem:l,handlers:r})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,o=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||Z,r=n.documentElement,i=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},fix:function(e){if(e[J.expando])return e;var t,n,r,i=e.type,o=e,s=this.fixHooks[i];for(s||(this.fixHooks[i]=s=kt.test(i)?this.mouseHooks:Et.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new J.Event(o),t=r.length;t--;)n=r[t],e[n]=o[n];return e.target||(e.target=Z),3===e.target.nodeType&&(e.target=e.target.parentNode),s.filter?s.filter(e,o):e},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==h()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===h()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&J.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(e){return J.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=J.extend(new J.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?J.event.trigger(i,null,t):J.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},J.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)},J.Event=function(e,t){return this instanceof J.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?c:u):this.type=e,t&&J.extend(this,t),this.timeStamp=e&&e.timeStamp||J.now(),void(this[J.expando]=!0)):new J.Event(e,t)},J.Event.prototype={isDefaultPrevented:u,isPropagationStopped:u,isImmediatePropagationStopped:u,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=c,e&&e.preventDefault&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=c,e&&e.stopPropagation&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=c,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},J.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){J.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return(!i||i!==r&&!J.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),Y.focusinBubbles||J.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){J.event.simulate(t,e.target,J.event.fix(e),!0)};J.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=mt.access(r,t);i||r.addEventListener(e,n,!0),mt.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=mt.access(r,t)-1;i?mt.access(r,t,i):(r.removeEventListener(e,n,!0),mt.remove(r,t))}}}),J.fn.extend({on:function(e,t,n,r,i){var o,s;if("object"==typeof e){"string"!=typeof t&&(n=n||t,t=void 0);for(s in e)this.on(s,t,n,e[s],i);return this}if(null==n&&null==r?(r=t,n=t=void 0):null==r&&("string"==typeof t?(r=n,n=void 0):(r=n,n=t,t=void 0)),r===!1)r=u;else if(!r)return this;return 1===i&&(o=r,r=function(e){return J().off(e),o.apply(this,arguments)},r.guid=o.guid||(o.guid=J.guid++)),this.each(function(){J.event.add(this,e,r,n,t)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,J(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return(t===!1||"function"==typeof t)&&(n=t,t=void 0),n===!1&&(n=u),this.each(function(){J.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){J.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?J.event.trigger(e,t,n,!0):void 0}});var Nt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Ot=/<([\w:]+)/,Dt=/<|&#?\w+;/,It=/<(?:script|style|link)/i,Rt=/checked\s*(?:[^=]|=\s*.checked.)/i,Lt=/^$|\/(?:java|ecma)script/i,Pt=/^true\/(.*)/,Ft=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Ht={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ht.optgroup=Ht.option,Ht.tbody=Ht.tfoot=Ht.colgroup=Ht.caption=Ht.thead,Ht.th=Ht.td,J.extend({clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),l=J.contains(e.ownerDocument,e);if(!(Y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||J.isXMLDoc(e)))for(s=m(a),o=m(e),r=0,i=o.length;i>r;r++)y(o[r],s[r]);if(t)if(n)for(o=o||m(e),s=s||m(a),r=0,i=o.length;i>r;r++)v(o[r],s[r]);else v(e,a);return s=m(a,"script"),s.length>0&&g(s,!l&&m(e,"script")),a},buildFragment:function(e,t,n,r){for(var i,o,s,a,l,c,u=t.createDocumentFragment(),h=[],f=0,p=e.length;p>f;f++)if(i=e[f],i||0===i)if("object"===J.type(i))J.merge(h,i.nodeType?[i]:i);else if(Dt.test(i)){for(o=o||u.appendChild(t.createElement("div")),s=(Ot.exec(i)||["",""])[1].toLowerCase(),a=Ht[s]||Ht._default,o.innerHTML=a[1]+i.replace(Nt,"<$1></$2>")+a[2],c=a[0];c--;)o=o.lastChild;J.merge(h,o.childNodes),o=u.firstChild,o.textContent=""}else h.push(t.createTextNode(i));for(u.textContent="",f=0;i=h[f++];)if((!r||-1===J.inArray(i,r))&&(l=J.contains(i.ownerDocument,i),o=m(u.appendChild(i),"script"),l&&g(o),n))for(c=0;i=o[c++];)Lt.test(i.type||"")&&n.push(i);return u},cleanData:function(e){for(var t,n,r,i,o=J.event.special,s=0;void 0!==(n=e[s]);s++){if(J.acceptData(n)&&(i=n[mt.expando],i&&(t=mt.cache[i]))){if(t.events)for(r in t.events)o[r]?J.event.remove(n,r):J.removeEvent(n,r,t.handle);mt.cache[i]&&delete mt.cache[i]}delete yt.cache[n[yt.expando]]}}}),J.fn.extend({text:function(e){return vt(this,function(e){return void 0===e?J.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=e)})},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=f(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=f(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){for(var n,r=e?J.filter(e,this):this,i=0;null!=(n=r[i]);i++)t||1!==n.nodeType||J.cleanData(m(n)),n.parentNode&&(t&&J.contains(n.ownerDocument,n)&&g(m(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(J.cleanData(m(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return J.clone(this,e,t)})},html:function(e){return vt(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!It.test(e)&&!Ht[(Ot.exec(e)||["",""])[1].toLowerCase()]){e=e.replace(Nt,"<$1></$2>");try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(J.cleanData(m(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=arguments[0];return this.domManip(arguments,function(t){e=this.parentNode,J.cleanData(m(this)),e&&e.replaceChild(t,this)}),e&&(e.length||e.nodeType)?this:this.remove()},detach:function(e){return this.remove(e,!0)
},domManip:function(e,t){e=B.apply([],e);var n,r,i,o,s,a,l=0,c=this.length,u=this,h=c-1,f=e[0],g=J.isFunction(f);if(g||c>1&&"string"==typeof f&&!Y.checkClone&&Rt.test(f))return this.each(function(n){var r=u.eq(n);g&&(e[0]=f.call(this,n,r.html())),r.domManip(e,t)});if(c&&(n=J.buildFragment(e,this[0].ownerDocument,!1,this),r=n.firstChild,1===n.childNodes.length&&(n=r),r)){for(i=J.map(m(n,"script"),p),o=i.length;c>l;l++)s=n,l!==h&&(s=J.clone(s,!0,!0),o&&J.merge(i,m(s,"script"))),t.call(this[l],s,l);if(o)for(a=i[i.length-1].ownerDocument,J.map(i,d),l=0;o>l;l++)s=i[l],Lt.test(s.type||"")&&!mt.access(s,"globalEval")&&J.contains(a,s)&&(s.src?J._evalUrl&&J._evalUrl(s.src):J.globalEval(s.textContent.replace(Ft,"")))}return this}}),J.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){J.fn[e]=function(e){for(var n,r=[],i=J(e),o=i.length-1,s=0;o>=s;s++)n=s===o?this:this.clone(!0),J(i[s])[t](n),V.apply(r,n.get());return this.pushStack(r)}});var qt,Mt={},Wt=/^margin/,Ut=new RegExp("^("+xt+")(?!px)[a-z%]+$","i"),zt=function(t){return t.ownerDocument.defaultView.opener?t.ownerDocument.defaultView.getComputedStyle(t,null):e.getComputedStyle(t,null)};!function(){function t(){s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",s.innerHTML="",i.appendChild(o);var t=e.getComputedStyle(s,null);n="1%"!==t.top,r="4px"===t.width,i.removeChild(o)}var n,r,i=Z.documentElement,o=Z.createElement("div"),s=Z.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",Y.clearCloneStyle="content-box"===s.style.backgroundClip,o.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",o.appendChild(s),e.getComputedStyle&&J.extend(Y,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return null==r&&t(),r},reliableMarginRight:function(){var t,n=s.appendChild(Z.createElement("div"));return n.style.cssText=s.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",s.style.width="1px",i.appendChild(o),t=!parseFloat(e.getComputedStyle(n,null).marginRight),i.removeChild(o),s.removeChild(n),t}}))}(),J.swap=function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i};var Bt=/^(none|table(?!-c[ea]).+)/,Vt=new RegExp("^("+xt+")(.*)$","i"),$t=new RegExp("^([+-])=("+xt+")","i"),Kt={position:"absolute",visibility:"hidden",display:"block"},Xt={letterSpacing:"0",fontWeight:"400"},Gt=["Webkit","O","Moz","ms"];J.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=x(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=J.camelCase(t),l=e.style;return t=J.cssProps[a]||(J.cssProps[a]=_(l,a)),s=J.cssHooks[t]||J.cssHooks[a],void 0===n?s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:l[t]:(o=typeof n,"string"===o&&(i=$t.exec(n))&&(n=(i[1]+1)*i[2]+parseFloat(J.css(e,t)),o="number"),null!=n&&n===n&&("number"!==o||J.cssNumber[a]||(n+="px"),Y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(l[t]=n)),void 0)}},css:function(e,t,n,r){var i,o,s,a=J.camelCase(t);return t=J.cssProps[a]||(J.cssProps[a]=_(e.style,a)),s=J.cssHooks[t]||J.cssHooks[a],s&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=x(e,t,r)),"normal"===i&&t in Xt&&(i=Xt[t]),""===n||n?(o=parseFloat(i),n===!0||J.isNumeric(o)?o||0:i):i}}),J.each(["height","width"],function(e,t){J.cssHooks[t]={get:function(e,n,r){return n?Bt.test(J.css(e,"display"))&&0===e.offsetWidth?J.swap(e,Kt,function(){return E(e,t,r)}):E(e,t,r):void 0},set:function(e,n,r){var i=r&&zt(e);return S(e,n,r?T(e,t,r,"border-box"===J.css(e,"boxSizing",!1,i),i):0)}}}),J.cssHooks.marginRight=C(Y.reliableMarginRight,function(e,t){return t?J.swap(e,{display:"inline-block"},x,[e,"marginRight"]):void 0}),J.each({margin:"",padding:"",border:"Width"},function(e,t){J.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];4>r;r++)i[e+Ct[r]+t]=o[r]||o[r-2]||o[0];return i}},Wt.test(e)||(J.cssHooks[e+t].set=S)}),J.fn.extend({css:function(e,t){return vt(this,function(e,t,n){var r,i,o={},s=0;if(J.isArray(t)){for(r=zt(e),i=t.length;i>s;s++)o[t[s]]=J.css(e,t[s],!1,r);return o}return void 0!==n?J.style(e,t,n):J.css(e,t)},e,t,arguments.length>1)},show:function(){return k(this,!0)},hide:function(){return k(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){_t(this)?J(this).show():J(this).hide()})}}),J.Tween=A,A.prototype={constructor:A,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(J.cssNumber[n]?"":"px")},cur:function(){var e=A.propHooks[this.prop];return e&&e.get?e.get(this):A.propHooks._default.get(this)},run:function(e){var t,n=A.propHooks[this.prop];return this.pos=t=this.options.duration?J.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):A.propHooks._default.set(this),this}},A.prototype.init.prototype=A.prototype,A.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=J.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){J.fx.step[e.prop]?J.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[J.cssProps[e.prop]]||J.cssHooks[e.prop])?J.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},A.propHooks.scrollTop=A.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},J.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},J.fx=A.prototype.init,J.fx.step={};var Yt,Zt,Qt=/^(?:toggle|show|hide)$/,Jt=new RegExp("^(?:([+-])=|)("+xt+")([a-z%]*)$","i"),en=/queueHooks$/,tn=[D],nn={"*":[function(e,t){var n=this.createTween(e,t),r=n.cur(),i=Jt.exec(t),o=i&&i[3]||(J.cssNumber[e]?"":"px"),s=(J.cssNumber[e]||"px"!==o&&+r)&&Jt.exec(J.css(n.elem,e)),a=1,l=20;if(s&&s[3]!==o){o=o||s[3],i=i||[],s=+r||1;do a=a||".5",s/=a,J.style(n.elem,e,s+o);while(a!==(a=n.cur()/r)&&1!==a&&--l)}return i&&(s=n.start=+s||+r||0,n.unit=o,n.end=i[1]?s+(i[1]+1)*i[2]:+i[2]),n}]};J.Animation=J.extend(R,{tweener:function(e,t){J.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");for(var n,r=0,i=e.length;i>r;r++)n=e[r],nn[n]=nn[n]||[],nn[n].unshift(t)},prefilter:function(e,t){t?tn.unshift(e):tn.push(e)}}),J.speed=function(e,t,n){var r=e&&"object"==typeof e?J.extend({},e):{complete:n||!n&&t||J.isFunction(e)&&e,duration:e,easing:n&&t||t&&!J.isFunction(t)&&t};return r.duration=J.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in J.fx.speeds?J.fx.speeds[r.duration]:J.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){J.isFunction(r.old)&&r.old.call(this),r.queue&&J.dequeue(this,r.queue)},r},J.fn.extend({fadeTo:function(e,t,n,r){return this.filter(_t).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=J.isEmptyObject(e),o=J.speed(t,n,r),s=function(){var t=R(this,J.extend({},e),o);(i||mt.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=J.timers,s=mt.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&en.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));(t||!n)&&J.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=mt.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=J.timers,s=r?r.length:0;for(n.finish=!0,J.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;s>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),J.each(["toggle","show","hide"],function(e,t){var n=J.fn[t];J.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(N(t,!0),e,r,i)}}),J.each({slideDown:N("show"),slideUp:N("hide"),slideToggle:N("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){J.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),J.timers=[],J.fx.tick=function(){var e,t=0,n=J.timers;for(Yt=J.now();t<n.length;t++)e=n[t],e()||n[t]!==e||n.splice(t--,1);n.length||J.fx.stop(),Yt=void 0},J.fx.timer=function(e){J.timers.push(e),e()?J.fx.start():J.timers.pop()},J.fx.interval=13,J.fx.start=function(){Zt||(Zt=setInterval(J.fx.tick,J.fx.interval))},J.fx.stop=function(){clearInterval(Zt),Zt=null},J.fx.speeds={slow:600,fast:200,_default:400},J.fn.delay=function(e,t){return e=J.fx?J.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},function(){var e=Z.createElement("input"),t=Z.createElement("select"),n=t.appendChild(Z.createElement("option"));e.type="checkbox",Y.checkOn=""!==e.value,Y.optSelected=n.selected,t.disabled=!0,Y.optDisabled=!n.disabled,e=Z.createElement("input"),e.value="t",e.type="radio",Y.radioValue="t"===e.value}();var rn,on,sn=J.expr.attrHandle;J.fn.extend({attr:function(e,t){return vt(this,J.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){J.removeAttr(this,e)})}}),J.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(e&&3!==o&&8!==o&&2!==o)return typeof e.getAttribute===Tt?J.prop(e,t,n):(1===o&&J.isXMLDoc(e)||(t=t.toLowerCase(),r=J.attrHooks[t]||(J.expr.match.bool.test(t)?on:rn)),void 0===n?r&&"get"in r&&null!==(i=r.get(e,t))?i:(i=J.find.attr(e,t),null==i?void 0:i):null!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):void J.removeAttr(e,t))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(pt);if(o&&1===e.nodeType)for(;n=o[i++];)r=J.propFix[n]||n,J.expr.match.bool.test(n)&&(e[r]=!1),e.removeAttribute(n)},attrHooks:{type:{set:function(e,t){if(!Y.radioValue&&"radio"===t&&J.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}}}),on={set:function(e,t,n){return t===!1?J.removeAttr(e,n):e.setAttribute(n,n),n}},J.each(J.expr.match.bool.source.match(/\w+/g),function(e,t){var n=sn[t]||J.find.attr;sn[t]=function(e,t,r){var i,o;return r||(o=sn[t],sn[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,sn[t]=o),i}});var an=/^(?:input|select|textarea|button)$/i;J.fn.extend({prop:function(e,t){return vt(this,J.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[J.propFix[e]||e]})}}),J.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(e,t,n){var r,i,o,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return o=1!==s||!J.isXMLDoc(e),o&&(t=J.propFix[t]||t,i=J.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){return e.hasAttribute("tabindex")||an.test(e.nodeName)||e.href?e.tabIndex:-1}}}}),Y.optSelected||(J.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null}}),J.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){J.propFix[this.toLowerCase()]=this});var ln=/[\t\r\n\f]/g;J.fn.extend({addClass:function(e){var t,n,r,i,o,s,a="string"==typeof e&&e,l=0,c=this.length;if(J.isFunction(e))return this.each(function(t){J(this).addClass(e.call(this,t,this.className))});if(a)for(t=(e||"").match(pt)||[];c>l;l++)if(n=this[l],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(ln," "):" ")){for(o=0;i=t[o++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");s=J.trim(r),n.className!==s&&(n.className=s)}return this},removeClass:function(e){var t,n,r,i,o,s,a=0===arguments.length||"string"==typeof e&&e,l=0,c=this.length;if(J.isFunction(e))return this.each(function(t){J(this).removeClass(e.call(this,t,this.className))});if(a)for(t=(e||"").match(pt)||[];c>l;l++)if(n=this[l],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(ln," "):"")){for(o=0;i=t[o++];)for(;r.indexOf(" "+i+" ")>=0;)r=r.replace(" "+i+" "," ");s=e?J.trim(r):"",n.className!==s&&(n.className=s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):this.each(J.isFunction(e)?function(n){J(this).toggleClass(e.call(this,n,this.className,t),t)}:function(){if("string"===n)for(var t,r=0,i=J(this),o=e.match(pt)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else(n===Tt||"boolean"===n)&&(this.className&&mt.set(this,"__className__",this.className),this.className=this.className||e===!1?"":mt.get(this,"__className__")||"")})},hasClass:function(e){for(var t=" "+e+" ",n=0,r=this.length;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(ln," ").indexOf(t)>=0)return!0;return!1}});var cn=/\r/g;J.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=J.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,J(this).val()):e,null==i?i="":"number"==typeof i?i+="":J.isArray(i)&&(i=J.map(i,function(e){return null==e?"":e+""})),t=J.valHooks[this.type]||J.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return t=J.valHooks[i.type]||J.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(cn,""):null==n?"":n)}}}),J.extend({valHooks:{option:{get:function(e){var t=J.find.attr(e,"value");return null!=t?t:J.trim(J.text(e))}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,s=o?null:[],a=o?i+1:r.length,l=0>i?a:o?i:0;a>l;l++)if(n=r[l],!(!n.selected&&l!==i||(Y.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&J.nodeName(n.parentNode,"optgroup"))){if(t=J(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=J.makeArray(t),s=i.length;s--;)r=i[s],(r.selected=J.inArray(r.value,o)>=0)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),J.each(["radio","checkbox"],function(){J.valHooks[this]={set:function(e,t){return J.isArray(t)?e.checked=J.inArray(J(e).val(),t)>=0:void 0}},Y.checkOn||(J.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),J.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){J.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),J.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var un=J.now(),hn=/\?/;J.parseJSON=function(e){return JSON.parse(e+"")},J.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{n=new DOMParser,t=n.parseFromString(e,"text/xml")}catch(r){t=void 0}return(!t||t.getElementsByTagName("parsererror").length)&&J.error("Invalid XML: "+e),t};var fn=/#.*$/,pn=/([?&])_=[^&]*/,dn=/^(.*?):[ \t]*([^\r\n]*)$/gm,gn=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,vn=/^(?:GET|HEAD)$/,mn=/^\/\//,yn=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,bn={},wn={},xn="*/".concat("*"),Cn=e.location.href,_n=yn.exec(Cn.toLowerCase())||[];J.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Cn,type:"GET",isLocal:gn.test(_n[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":xn,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":J.parseJSON,"text xml":J.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?F(F(e,J.ajaxSettings),t):F(J.ajaxSettings,e)},ajaxPrefilter:L(bn),ajaxTransport:L(wn),ajax:function(e,t){function n(e,t,n,s){var l,u,m,y,w,C=t;2!==b&&(b=2,a&&clearTimeout(a),r=void 0,o=s||"",x.readyState=e>0?4:0,l=e>=200&&300>e||304===e,n&&(y=H(h,x,n)),y=q(h,y,x,l),l?(h.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(J.lastModified[i]=w),w=x.getResponseHeader("etag"),w&&(J.etag[i]=w)),204===e||"HEAD"===h.type?C="nocontent":304===e?C="notmodified":(C=y.state,u=y.data,m=y.error,l=!m)):(m=C,(e||!C)&&(C="error",0>e&&(e=0))),x.status=e,x.statusText=(t||C)+"",l?d.resolveWith(f,[u,C,x]):d.rejectWith(f,[x,C,m]),x.statusCode(v),v=void 0,c&&p.trigger(l?"ajaxSuccess":"ajaxError",[x,h,l?u:m]),g.fireWith(f,[x,C]),c&&(p.trigger("ajaxComplete",[x,h]),--J.active||J.event.trigger("ajaxStop")))}"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,o,s,a,l,c,u,h=J.ajaxSetup({},t),f=h.context||h,p=h.context&&(f.nodeType||f.jquery)?J(f):J.event,d=J.Deferred(),g=J.Callbacks("once memory"),v=h.statusCode||{},m={},y={},b=0,w="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(2===b){if(!s)for(s={};t=dn.exec(o);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===b?o:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return b||(e=y[n]=y[n]||e,m[e]=t),this},overrideMimeType:function(e){return b||(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>b)for(t in e)v[t]=[v[t],e[t]];else x.always(e[x.status]);return this},abort:function(e){var t=e||w;return r&&r.abort(t),n(0,t),this}};if(d.promise(x).complete=g.add,x.success=x.done,x.error=x.fail,h.url=((e||h.url||Cn)+"").replace(fn,"").replace(mn,_n[1]+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=J.trim(h.dataType||"*").toLowerCase().match(pt)||[""],null==h.crossDomain&&(l=yn.exec(h.url.toLowerCase()),h.crossDomain=!(!l||l[1]===_n[1]&&l[2]===_n[2]&&(l[3]||("http:"===l[1]?"80":"443"))===(_n[3]||("http:"===_n[1]?"80":"443")))),h.data&&h.processData&&"string"!=typeof h.data&&(h.data=J.param(h.data,h.traditional)),P(bn,h,t,x),2===b)return x;c=J.event&&h.global,c&&0===J.active++&&J.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!vn.test(h.type),i=h.url,h.hasContent||(h.data&&(i=h.url+=(hn.test(i)?"&":"?")+h.data,delete h.data),h.cache===!1&&(h.url=pn.test(i)?i.replace(pn,"$1_="+un++):i+(hn.test(i)?"&":"?")+"_="+un++)),h.ifModified&&(J.lastModified[i]&&x.setRequestHeader("If-Modified-Since",J.lastModified[i]),J.etag[i]&&x.setRequestHeader("If-None-Match",J.etag[i])),(h.data&&h.hasContent&&h.contentType!==!1||t.contentType)&&x.setRequestHeader("Content-Type",h.contentType),x.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+xn+"; q=0.01":""):h.accepts["*"]);for(u in h.headers)x.setRequestHeader(u,h.headers[u]);if(h.beforeSend&&(h.beforeSend.call(f,x,h)===!1||2===b))return x.abort();w="abort";for(u in{success:1,error:1,complete:1})x[u](h[u]);if(r=P(wn,h,t,x)){x.readyState=1,c&&p.trigger("ajaxSend",[x,h]),h.async&&h.timeout>0&&(a=setTimeout(function(){x.abort("timeout")},h.timeout));try{b=1,r.send(m,n)}catch(C){if(!(2>b))throw C;n(-1,C)}}else n(-1,"No Transport");return x},getJSON:function(e,t,n){return J.get(e,t,n,"json")},getScript:function(e,t){return J.get(e,void 0,t,"script")}}),J.each(["get","post"],function(e,t){J[t]=function(e,n,r,i){return J.isFunction(n)&&(i=i||r,r=n,n=void 0),J.ajax({url:e,type:t,dataType:i,data:n,success:r})}}),J._evalUrl=function(e){return J.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},J.fn.extend({wrapAll:function(e){var t;return J.isFunction(e)?this.each(function(t){J(this).wrapAll(e.call(this,t))}):(this[0]&&(t=J(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return this.each(J.isFunction(e)?function(t){J(this).wrapInner(e.call(this,t))}:function(){var t=J(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=J.isFunction(e);return this.each(function(n){J(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){J.nodeName(this,"body")||J(this).replaceWith(this.childNodes)}).end()}}),J.expr.filters.hidden=function(e){return e.offsetWidth<=0&&e.offsetHeight<=0},J.expr.filters.visible=function(e){return!J.expr.filters.hidden(e)};var Sn=/%20/g,Tn=/\[\]$/,En=/\r?\n/g,kn=/^(?:submit|button|image|reset|file)$/i,An=/^(?:input|select|textarea|keygen)/i;J.param=function(e,t){var n,r=[],i=function(e,t){t=J.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=J.ajaxSettings&&J.ajaxSettings.traditional),J.isArray(e)||e.jquery&&!J.isPlainObject(e))J.each(e,function(){i(this.name,this.value)});else for(n in e)M(n,e[n],t,i);return r.join("&").replace(Sn,"+")},J.fn.extend({serialize:function(){return J.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=J.prop(this,"elements");return e?J.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!J(this).is(":disabled")&&An.test(this.nodeName)&&!kn.test(e)&&(this.checked||!St.test(e))}).map(function(e,t){var n=J(this).val();return null==n?null:J.isArray(n)?J.map(n,function(e){return{name:t.name,value:e.replace(En,"\r\n")}}):{name:t.name,value:n.replace(En,"\r\n")}}).get()}}),J.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(e){}};var jn=0,Nn={},On={0:200,1223:204},Dn=J.ajaxSettings.xhr();e.attachEvent&&e.attachEvent("onunload",function(){for(var e in Nn)Nn[e]()}),Y.cors=!!Dn&&"withCredentials"in Dn,Y.ajax=Dn=!!Dn,J.ajaxTransport(function(e){var t;return Y.cors||Dn&&!e.crossDomain?{send:function(n,r){var i,o=e.xhr(),s=++jn;if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(i in e.xhrFields)o[i]=e.xhrFields[i];e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(i in n)o.setRequestHeader(i,n[i]);t=function(e){return function(){t&&(delete Nn[s],t=o.onload=o.onerror=null,"abort"===e?o.abort():"error"===e?r(o.status,o.statusText):r(On[o.status]||o.status,o.statusText,"string"==typeof o.responseText?{text:o.responseText}:void 0,o.getAllResponseHeaders()))}},o.onload=t(),o.onerror=t("error"),t=Nn[s]=t("abort");try{o.send(e.hasContent&&e.data||null)}catch(a){if(t)throw a}},abort:function(){t&&t()}}:void 0}),J.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return J.globalEval(e),e}}}),J.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),J.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=J("<script>").prop({async:!0,charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),Z.head.appendChild(t[0])},abort:function(){n&&n()}}}});var In=[],Rn=/(=)\?(?=&|$)|\?\?/;J.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=In.pop()||J.expando+"_"+un++;return this[e]=!0,e}}),J.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,s,a=t.jsonp!==!1&&(Rn.test(t.url)?"url":"string"==typeof t.data&&!(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Rn.test(t.data)&&"data");return a||"jsonp"===t.dataTypes[0]?(i=t.jsonpCallback=J.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Rn,"$1"+i):t.jsonp!==!1&&(t.url+=(hn.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||J.error(i+" was not called"),s[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){s=arguments},r.always(function(){e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,In.push(i)),s&&J.isFunction(o)&&o(s[0]),s=o=void 0}),"script"):void 0}),J.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||Z;var r=st.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=J.buildFragment([e],t,i),i&&i.length&&J(i).remove(),J.merge([],r.childNodes))};var Ln=J.fn.load;J.fn.load=function(e,t,n){if("string"!=typeof e&&Ln)return Ln.apply(this,arguments);var r,i,o,s=this,a=e.indexOf(" ");return a>=0&&(r=J.trim(e.slice(a)),e=e.slice(0,a)),J.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&J.ajax({url:e,type:i,dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?J("<div>").append(J.parseHTML(e)).find(r):e)}).complete(n&&function(e,t){s.each(n,o||[e.responseText,t,e])}),this},J.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){J.fn[t]=function(e){return this.on(t,e)}}),J.expr.filters.animated=function(e){return J.grep(J.timers,function(t){return e===t.elem}).length};var Pn=e.document.documentElement;J.offset={setOffset:function(e,t,n){var r,i,o,s,a,l,c,u=J.css(e,"position"),h=J(e),f={};"static"===u&&(e.style.position="relative"),a=h.offset(),o=J.css(e,"top"),l=J.css(e,"left"),c=("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1,c?(r=h.position(),s=r.top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(l)||0),J.isFunction(t)&&(t=t.call(e,n,a)),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+i),"using"in t?t.using.call(e,f):h.css(f)}},J.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){J.offset.setOffset(this,e,t)});var t,n,r=this[0],i={top:0,left:0},o=r&&r.ownerDocument;if(o)return t=o.documentElement,J.contains(t,r)?(typeof r.getBoundingClientRect!==Tt&&(i=r.getBoundingClientRect()),n=W(o),{top:i.top+n.pageYOffset-t.clientTop,left:i.left+n.pageXOffset-t.clientLeft}):i},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===J.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),J.nodeName(e[0],"html")||(r=e.offset()),r.top+=J.css(e[0],"borderTopWidth",!0),r.left+=J.css(e[0],"borderLeftWidth",!0)),{top:t.top-r.top-J.css(n,"marginTop",!0),left:t.left-r.left-J.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent||Pn;e&&!J.nodeName(e,"html")&&"static"===J.css(e,"position");)e=e.offsetParent;return e||Pn})}}),J.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,n){var r="pageYOffset"===n;J.fn[t]=function(i){return vt(this,function(t,i,o){var s=W(t);return void 0===o?s?s[n]:t[i]:void(s?s.scrollTo(r?e.pageXOffset:o,r?o:e.pageYOffset):t[i]=o)},t,i,arguments.length,null)}}),J.each(["top","left"],function(e,t){J.cssHooks[t]=C(Y.pixelPosition,function(e,n){return n?(n=x(e,t),Ut.test(n)?J(e).position()[t]+"px":n):void 0})}),J.each({Height:"height",Width:"width"},function(e,t){J.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){J.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),s=n||(r===!0||i===!0?"margin":"border");return vt(this,function(t,n,r){var i;return J.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?J.css(t,n,s):J.style(t,n,r,s)},t,o?r:void 0,o,null)}})}),J.fn.size=function(){return this.length},J.fn.andSelf=J.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return J});var Fn=e.jQuery,Hn=e.$;return J.noConflict=function(t){return e.$===J&&(e.$=Hn),t&&e.jQuery===J&&(e.jQuery=Fn),J},typeof t===Tt&&(e.jQuery=e.$=J),J})},{}],8:[function(e,t,n){(function(e){(function(){function r(e,t){if(e!==t){var n=e===e,r=t===t;if(e>t||!n||"undefined"==typeof e&&r)return 1;if(t>e||!r||"undefined"==typeof t&&n)return-1}return 0}function i(e,t,n){for(var r=e.length,i=n?r:-1;n?i--:++i<r;)if(t(e[i],i,e))return i;return-1}function o(e,t,n){if(t!==t)return v(e,n);for(var r=n-1,i=e.length;++r<i;)if(e[r]===t)return r;return-1}function s(e){return"function"==typeof e||!1}function a(e){return"string"==typeof e?e:null==e?"":e+""}function l(e){return e.charCodeAt(0)}function c(e,t){for(var n=-1,r=e.length;++n<r&&t.indexOf(e.charAt(n))>-1;);return n}function u(e,t){for(var n=e.length;n--&&t.indexOf(e.charAt(n))>-1;);return n}function h(e,t){return r(e.criteria,t.criteria)||e.index-t.index}function f(e,t,n){for(var i=-1,o=e.criteria,s=t.criteria,a=o.length,l=n.length;++i<a;){var c=r(o[i],s[i]);if(c)return i>=l?c:c*(n[i]?1:-1)}return e.index-t.index}function p(e){return Wt[e]}function d(e){return Ut[e]}function g(e){return"\\"+Vt[e]}function v(e,t,n){for(var r=e.length,i=t+(n?0:-1);n?i--:++i<r;){var o=e[i];if(o!==o)return i}return-1}function m(e){return!!e&&"object"==typeof e}function y(e){return 160>=e&&e>=9&&13>=e||32==e||160==e||5760==e||6158==e||e>=8192&&(8202>=e||8232==e||8233==e||8239==e||8287==e||12288==e||65279==e)}function b(e,t){for(var n=-1,r=e.length,i=-1,o=[];++n<r;)e[n]===t&&(e[n]=B,o[++i]=n);return o}function w(e,t){for(var n,r=-1,i=e.length,o=-1,s=[];++r<i;){var a=e[r],l=t?t(a,r,e):a;r&&n===l||(n=l,s[++o]=a)}return s}function x(e){for(var t=-1,n=e.length;++t<n&&y(e.charCodeAt(t)););return t}function C(e){for(var t=e.length;t--&&y(e.charCodeAt(t)););return t}function _(e){return zt[e]}function S(e){function t(e){if(m(e)&&!sl(e)&&!(e instanceof Z)){if(e instanceof y)return e;if(Os.call(e,"__chain__")&&Os.call(e,"__wrapped__"))return Xr(e)}return new y(e)}function n(){}function y(e,t,n){this.__wrapped__=e,this.__actions__=n||[],this.__chain__=!!t}function Z(e){this.__wrapped__=e,this.__actions__=null,this.__dir__=1,this.__dropCount__=0,this.__filtered__=!1,this.__iteratees__=null,this.__takeCount__=aa,this.__views__=null}function tt(){var e=this.__actions__,t=this.__iteratees__,n=this.__views__,r=new Z(this.__wrapped__);return r.__actions__=e?Yt(e):null,r.__dir__=this.__dir__,r.__filtered__=this.__filtered__,r.__iteratees__=t?Yt(t):null,r.__takeCount__=this.__takeCount__,r.__views__=n?Yt(n):null,r}function rt(){if(this.__filtered__){var e=new Z(this);e.__dir__=-1,e.__filtered__=!0}else e=this.clone(),e.__dir__*=-1;return e}function Wt(){var e=this.__wrapped__.value();if(!sl(e))return Xn(e,this.__actions__);var t=this.__dir__,n=0>t,r=Or(0,e.length,this.__views__),i=r.start,o=r.end,s=o-i,a=n?o:i-1,l=ta(s,this.__takeCount__),c=this.__iteratees__,u=c?c.length:0,h=0,f=[];e:for(;s--&&l>h;){a+=t;for(var p=-1,d=e[a];++p<u;){var g=c[p],v=g.iteratee,m=g.type;if(m==M){if(g.done&&(n?a>g.index:a<g.index)&&(g.count=0,g.done=!1),g.index=a,!g.done){var y=g.limit;if(!(g.done=y>-1?g.count++>=y:!v(d)))continue e}}else{var b=v(d);if(m==U)d=b;else if(!b){if(m==W)continue e;break e}}}f[h++]=d}return f}function Ut(){this.__data__={}}function zt(e){return this.has(e)&&delete this.__data__[e]}function Bt(e){return"__proto__"==e?T:this.__data__[e]}function Vt(e){return"__proto__"!=e&&Os.call(this.__data__,e)}function $t(e,t){return"__proto__"!=e&&(this.__data__[e]=t),this
}function Kt(e){var t=e?e.length:0;for(this.data={hash:Zs(null),set:new Bs};t--;)this.push(e[t])}function Xt(e,t){var n=e.data,r="string"==typeof t||fo(t)?n.set.has(t):n.hash[t];return r?0:-1}function Gt(e){var t=this.data;"string"==typeof e||fo(e)?t.set.add(e):t.hash[e]=!0}function Yt(e,t){var n=-1,r=e.length;for(t||(t=gs(r));++n<r;)t[n]=e[n];return t}function Zt(e,t){for(var n=-1,r=e.length;++n<r&&t(e[n],n,e)!==!1;);return e}function en(e,t){for(var n=e.length;n--&&t(e[n],n,e)!==!1;);return e}function tn(e,t){for(var n=-1,r=e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function nn(e,t){for(var n=-1,r=e.length,i=-1,o=[];++n<r;){var s=e[n];t(s,n,e)&&(o[++i]=s)}return o}function rn(e,t){for(var n=-1,r=e.length,i=gs(r);++n<r;)i[n]=t(e[n],n,e);return i}function on(e){for(var t=-1,n=e.length,r=sa;++t<n;){var i=e[t];i>r&&(r=i)}return r}function sn(e){for(var t=-1,n=e.length,r=aa;++t<n;){var i=e[t];r>i&&(r=i)}return r}function an(e,t,n,r){var i=-1,o=e.length;for(r&&o&&(n=e[++i]);++i<o;)n=t(n,e[i],i,e);return n}function ln(e,t,n,r){var i=e.length;for(r&&i&&(n=e[--i]);i--;)n=t(n,e[i],i,e);return n}function cn(e,t){for(var n=-1,r=e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}function un(e){for(var t=e.length,n=0;t--;)n+=+e[t]||0;return n}function hn(e,t){return"undefined"==typeof e?t:e}function fn(e,t,n,r){return"undefined"!=typeof e&&Os.call(r,n)?e:t}function pn(e,t,n){var r=yl(t);if(!n)return gn(t,e,r);for(var i=-1,o=r.length;++i<o;){var s=r[i],a=e[s],l=n(a,t[s],s,e,t);(l===l?l===a:a!==a)&&("undefined"!=typeof a||s in e)||(e[s]=l)}return e}function dn(e,t){for(var n=-1,r=e.length,i=Hr(r),o=t.length,s=gs(o);++n<o;){var a=t[n];i?(a=parseFloat(a),s[n]=Lr(a,r)?e[a]:T):s[n]=e[a]}return s}function gn(e,t,n){n||(n=t,t={});for(var r=-1,i=n.length;++r<i;){var o=n[r];t[o]=e[o]}return t}function vn(e,t,n){var r=typeof e;return"function"==r?"undefined"==typeof t?e:Zn(e,t,n):null==e?ns:"object"==r?In(e):"undefined"==typeof t?Fn(e+""):Rn(e+"",t)}function mn(e,t,n,r,i,o,s){var a;if(n&&(a=i?n(e,r,i):n(e)),"undefined"!=typeof a)return a;if(!fo(e))return e;var l=sl(e);if(l){if(a=Dr(e),!t)return Yt(e,a)}else{var c=Is.call(e),u=c==Y;if(c!=J&&c!=V&&(!u||i))return qt[c]?Rr(e,c,t):i?e:{};if(a=Ir(u?{}:e),!t)return gn(e,a,yl(e))}o||(o=[]),s||(s=[]);for(var h=o.length;h--;)if(o[h]==e)return s[h];return o.push(e),s.push(a),(l?Zt:En)(e,function(r,i){a[i]=mn(r,t,n,i,e,o,s)}),a}function yn(e,t,n){if("function"!=typeof e)throw new Ss(z);return Vs(function(){e.apply(T,n)},t)}function bn(e,t){var n=e?e.length:0,r=[];if(!n)return r;var i=-1,s=Nr(),a=s==o,l=a&&t.length>=200?Ca(t):null,c=t.length;l&&(s=Xt,a=!1,t=l);e:for(;++i<n;){var u=e[i];if(a&&u===u){for(var h=c;h--;)if(t[h]===u)continue e;r.push(u)}else s(t,u,0)<0&&r.push(u)}return r}function wn(e,t){var n=!0;return ma(e,function(e,r,i){return n=!!t(e,r,i)}),n}function xn(e,t,n,r){var i=e.length;for(n=null==n?0:+n||0,0>n&&(n=-n>i?0:i+n),r="undefined"==typeof r||r>i?i:+r||0,0>r&&(r+=i),i=n>r?0:r>>>0,n>>>=0;i>n;)e[n++]=t;return e}function Cn(e,t){var n=[];return ma(e,function(e,r,i){t(e,r,i)&&n.push(e)}),n}function _n(e,t,n,r){var i;return n(e,function(e,n,o){return t(e,n,o)?(i=r?n:e,!1):void 0}),i}function Sn(e,t,n){for(var r=-1,i=e.length,o=-1,s=[];++r<i;){var a=e[r];if(m(a)&&Hr(a.length)&&(sl(a)||oo(a))){t&&(a=Sn(a,t,n));var l=-1,c=a.length;for(s.length+=c;++l<c;)s[++o]=a[l]}else n||(s[++o]=a)}return s}function Tn(e,t){return ba(e,t,jo)}function En(e,t){return ba(e,t,yl)}function kn(e,t){return wa(e,t,yl)}function An(e,t){for(var n=-1,r=t.length,i=-1,o=[];++n<r;){var s=t[n];ll(e[s])&&(o[++i]=s)}return o}function jn(e,t,n,r,i,o){if(e===t)return 0!==e||1/e==1/t;var s=typeof e,a=typeof t;return"function"!=s&&"object"!=s&&"function"!=a&&"object"!=a||null==e||null==t?e!==e&&t!==t:Nn(e,t,jn,n,r,i,o)}function Nn(e,t,n,r,i,o,s){var a=sl(e),l=sl(t),c=$,u=$;a||(c=Is.call(e),c==V?c=J:c!=J&&(a=xo(e))),l||(u=Is.call(t),u==V?u=J:u!=J&&(l=xo(t)));var h=c==J||i&&c==Y,f=u==J||i&&u==Y,p=c==u;if(p&&!a&&!h)return Er(e,t,c);if(i){if(!(p||h&&f))return!1}else{var d=h&&Os.call(e,"__wrapped__"),g=f&&Os.call(t,"__wrapped__");if(d||g)return n(d?e.value():e,g?t.value():t,r,i,o,s);if(!p)return!1}o||(o=[]),s||(s=[]);for(var v=o.length;v--;)if(o[v]==e)return s[v]==t;o.push(e),s.push(t);var m=(a?Tr:kr)(e,t,n,r,i,o,s);return o.pop(),s.pop(),m}function On(e,t,n,r,i){for(var o=-1,s=t.length,a=!i;++o<s;)if(a&&r[o]?n[o]!==e[t[o]]:!(t[o]in e))return!1;for(o=-1;++o<s;){var l=t[o],c=e[l],u=n[o];if(a&&r[o])var h="undefined"!=typeof c||l in e;else h=i?i(c,u,l):T,"undefined"==typeof h&&(h=jn(u,c,i,!0));if(!h)return!1}return!0}function Dn(e,t){var n=[];return ma(e,function(e,r,i){n.push(t(e,r,i))}),n}function In(e){var t=yl(e),n=t.length;if(!n)return ts(!0);if(1==n){var r=t[0],i=e[r];if(qr(i))return function(e){return null!=e&&e[r]===i&&("undefined"!=typeof i||r in Kr(e))}}for(var o=gs(n),s=gs(n);n--;)i=e[t[n]],o[n]=i,s[n]=qr(i);return function(e){return null!=e&&On(Kr(e),t,o,s)}}function Rn(e,t){return qr(t)?function(n){return null!=n&&n[e]===t&&("undefined"!=typeof t||e in Kr(n))}:function(n){return null!=n&&jn(t,n[e],null,!0)}}function Ln(e,t,n,r,i){if(!fo(e))return e;var o=Hr(t.length)&&(sl(t)||xo(t));return(o?Zt:En)(t,function(t,s,a){if(m(t))return r||(r=[]),i||(i=[]),Pn(e,a,s,Ln,n,r,i);var l=e[s],c=n?n(l,t,s,e,a):T,u="undefined"==typeof c;u&&(c=t),!o&&"undefined"==typeof c||!u&&(c===c?c===l:l!==l)||(e[s]=c)}),e}function Pn(e,t,n,r,i,o,s){for(var a=o.length,l=t[n];a--;)if(o[a]==l)return void(e[n]=s[a]);var c=e[n],u=i?i(c,l,n,e,t):T,h="undefined"==typeof u;h&&(u=l,Hr(l.length)&&(sl(l)||xo(l))?u=sl(c)?c:c&&c.length?Yt(c):[]:cl(l)||oo(l)?u=oo(c)?So(c):cl(c)?c:{}:h=!1),o.push(l),s.push(u),h?e[n]=r(u,l,i,o,s):(u===u?u!==c:c===c)&&(e[n]=u)}function Fn(e){return function(t){return null==t?T:t[e]}}function Hn(e,t){return e+Ms(oa()*(t-e+1))}function qn(e,t,n,r,i){return i(e,function(e,i,o){n=r?(r=!1,e):t(n,e,i,o)}),n}function Mn(e,t,n){var r=-1,i=e.length;t=null==t?0:+t||0,0>t&&(t=-t>i?0:i+t),n="undefined"==typeof n||n>i?i:+n||0,0>n&&(n+=i),i=t>n?0:n-t>>>0,t>>>=0;for(var o=gs(i);++r<i;)o[r]=e[r+t];return o}function Wn(e,t){var n;return ma(e,function(e,r,i){return n=t(e,r,i),!n}),!!n}function Un(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}function zn(e,t,n){var r=-1,i=e.length,o=Hr(i)?gs(i):[];return ma(e,function(e){for(var n=t.length,i=gs(n);n--;)i[n]=null==e?T:e[t[n]];o[++r]={criteria:i,index:r,value:e}}),Un(o,function(e,t){return f(e,t,n)})}function Bn(e,t){var n=0;return ma(e,function(e,r,i){n+=+t(e,r,i)||0}),n}function Vn(e,t){var n=-1,r=Nr(),i=e.length,s=r==o,a=s&&i>=200,l=a?Ca():null,c=[];l?(r=Xt,s=!1):(a=!1,l=t?[]:c);e:for(;++n<i;){var u=e[n],h=t?t(u,n,e):u;if(s&&u===u){for(var f=l.length;f--;)if(l[f]===h)continue e;t&&l.push(h),c.push(u)}else r(l,h,0)<0&&((t||a)&&l.push(h),c.push(u))}return c}function $n(e,t){for(var n=-1,r=t.length,i=gs(r);++n<r;)i[n]=e[t[n]];return i}function Kn(e,t,n,r){for(var i=e.length,o=r?i:-1;(r?o--:++o<i)&&t(e[o],o,e););return n?Mn(e,r?0:o,r?o+1:i):Mn(e,r?o+1:0,r?i:o)}function Xn(e,t){var n=e;n instanceof Z&&(n=n.value());for(var r=-1,i=t.length;++r<i;){var o=[n],s=t[r];Us.apply(o,s.args),n=s.func.apply(s.thisArg,o)}return n}function Gn(e,t,n){var r=0,i=e?e.length:r;if("number"==typeof t&&t===t&&ua>=i){for(;i>r;){var o=r+i>>>1,s=e[o];(n?t>=s:t>s)?r=o+1:i=o}return i}return Yn(e,t,ns,n)}function Yn(e,t,n,r){t=n(t);for(var i=0,o=e?e.length:0,s=t!==t,a="undefined"==typeof t;o>i;){var l=Ms((i+o)/2),c=n(e[l]),u=c===c;if(s)var h=u||r;else h=a?u&&(r||"undefined"!=typeof c):r?t>=c:t>c;h?i=l+1:o=l}return ta(o,ca)}function Zn(e,t,n){if("function"!=typeof e)return ns;if("undefined"==typeof t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 3:return function(n,r,i){return e.call(t,n,r,i)};case 4:return function(n,r,i,o){return e.call(t,n,r,i,o)};case 5:return function(n,r,i,o,s){return e.call(t,n,r,i,o,s)}}return function(){return e.apply(t,arguments)}}function Qn(e){return Fs.call(e,0)}function Jn(e,t,n){for(var r=n.length,i=-1,o=ea(e.length-r,0),s=-1,a=t.length,l=gs(o+a);++s<a;)l[s]=t[s];for(;++i<r;)l[n[i]]=e[i];for(;o--;)l[s++]=e[i++];return l}function er(e,t,n){for(var r=-1,i=n.length,o=-1,s=ea(e.length-i,0),a=-1,l=t.length,c=gs(s+l);++o<s;)c[o]=e[o];for(var u=o;++a<l;)c[u+a]=t[a];for(;++r<i;)c[u+n[r]]=e[o++];return c}function tr(e,t){return function(n,r,i){var o=t?t():{};if(r=jr(r,i,3),sl(n))for(var s=-1,a=n.length;++s<a;){var l=n[s];e(o,l,r(l,s,n),n)}else ma(n,function(t,n,i){e(o,t,r(t,n,i),i)});return o}}function nr(e){return function(){var t=arguments,n=t.length,r=t[0];if(2>n||null==r)return r;var i=t[n-2],o=t[n-1],s=t[3];n>3&&"function"==typeof i?(i=Zn(i,o,5),n-=2):(i=n>2&&"function"==typeof o?o:null,n-=i?1:0),s&&Pr(t[1],t[2],s)&&(i=3==n?null:i,n=2);for(var a=0;++a<n;){var l=t[a];l&&e(r,l,i)}return r}}function rr(e,t){return function(n,r){var i=n?n.length:0;if(!Hr(i))return e(n,r);for(var o=t?i:-1,s=Kr(n);(t?o--:++o<i)&&r(s[o],o,s)!==!1;);return n}}function ir(e){return function(t,n,r){for(var i=Kr(t),o=r(t),s=o.length,a=e?s:-1;e?a--:++a<s;){var l=o[a];if(n(i[l],l,i)===!1)break}return t}}function or(e,t){function n(){var i=this&&this!==Qt&&this instanceof n?r:e;return i.apply(t,arguments)}var r=ar(e);return n}function sr(e){return function(t){for(var n=-1,r=Jo(qo(t)),i=r.length,o="";++n<i;)o=e(o,r[n],n);return o}}function ar(e){return function(){var t=va(e.prototype),n=e.apply(t,arguments);return fo(n)?n:t}}function lr(e){function t(n,r,i){i&&Pr(n,r,i)&&(r=null);var o=Sr(n,e,null,null,null,null,null,r);return o.placeholder=t.placeholder,o}return t}function cr(e,t){return function(n,r,i){i&&Pr(n,r,i)&&(r=null);var o=jr(),s=null==r;if(o===vn&&s||(s=!1,r=o(r,i,3)),s){var a=sl(n);if(a||!wo(n))return e(a?n:$r(n));r=l}return Ar(n,r,t)}}function ur(e,t){return function(n,r,o){if(r=jr(r,o,3),sl(n)){var s=i(n,r,t);return s>-1?n[s]:T}return _n(n,r,e)}}function hr(e){return function(t,n,r){return t&&t.length?(n=jr(n,r,3),i(t,n,e)):-1}}function fr(e){return function(t,n,r){return n=jr(n,r,3),_n(t,n,e,!0)}}function pr(e){return function(){var t=arguments.length;if(!t)return function(){return arguments[0]};for(var n,r=e?t:-1,i=0,o=gs(t);e?r--:++r<t;){var s=o[i++]=arguments[r];if("function"!=typeof s)throw new Ss(z);var a=n?"":Sa(s);n="wrapper"==a?new y([]):n}for(r=n?-1:t;++r<t;){s=o[r],a=Sa(s);var l="wrapper"==a?_a(s):null;n=l&&Fr(l[0])?n[Sa(l[0])].apply(n,l[3]):1==s.length&&Fr(s)?n[a]():n.thru(s)}return function(){var e=arguments;if(n&&1==e.length&&sl(e[0]))return n.plant(e[0]).value();for(var r=0,i=o[r].apply(this,e);++r<t;)i=o[r].call(this,i);return i}}}function dr(e,t){return function(n,r,i){return"function"==typeof r&&"undefined"==typeof i&&sl(n)?e(n,r):t(n,Zn(r,i,3))}}function gr(e){return function(t,n,r){return("function"!=typeof n||"undefined"!=typeof r)&&(n=Zn(n,r,3)),e(t,n,jo)}}function vr(e){return function(t,n,r){return("function"!=typeof n||"undefined"!=typeof r)&&(n=Zn(n,r,3)),e(t,n)}}function mr(e){return function(t,n,r){return t=a(t),t&&(e?t:"")+xr(t,n,r)+(e?"":t)}}function yr(e){var t=Ji(function(n,r){var i=b(r,t.placeholder);return Sr(n,e,null,r,i)});return t}function br(e,t){return function(n,r,i,o){var s=arguments.length<3;return"function"==typeof r&&"undefined"==typeof o&&sl(n)?e(n,r,i,s):qn(n,jr(r,o,4),i,s,t)}}function wr(e,t,n,r,i,o,s,a,l,c){function u(){for(var w=arguments.length,x=w,C=gs(w);x--;)C[x]=arguments[x];if(r&&(C=Jn(C,r,i)),o&&(C=er(C,o,s)),d||v){var _=u.placeholder,S=b(C,_);if(w-=S.length,c>w){var E=a?Yt(a):null,j=ea(c-w,0),N=d?S:null,O=d?null:S,R=d?C:null,L=d?null:C;t|=d?D:I,t&=~(d?I:D),g||(t&=~(k|A));var P=[e,t,n,R,N,L,O,E,l,j],F=wr.apply(T,P);return Fr(e)&&Ta(F,P),F.placeholder=_,F}}var H=f?n:this;p&&(e=H[y]),a&&(C=zr(C,a)),h&&l<C.length&&(C.length=l);var q=this&&this!==Qt&&this instanceof u?m||ar(e):e;return q.apply(H,C)}var h=t&R,f=t&k,p=t&A,d=t&N,g=t&j,v=t&O,m=!p&&ar(e),y=e;return u}function xr(e,t,n){var r=e.length;if(t=+t,r>=t||!Qs(t))return"";var i=t-r;return n=null==n?" ":n+"",Vo(n,Hs(i/n.length)).slice(0,i)}function Cr(e,t,n,r){function i(){for(var t=-1,a=arguments.length,l=-1,c=r.length,u=gs(a+c);++l<c;)u[l]=r[l];for(;a--;)u[l++]=arguments[++t];var h=this&&this!==Qt&&this instanceof i?s:e;return h.apply(o?n:this,u)}var o=t&k,s=ar(e);return i}function _r(e){return function(t,n,r,i){var o=jr(r);return o===vn&&null==r?Gn(t,n,e):Yn(t,n,o(r,i,1),e)}}function Sr(e,t,n,r,i,o,s,a){var l=t&A;if(!l&&"function"!=typeof e)throw new Ss(z);var c=r?r.length:0;if(c||(t&=~(D|I),r=i=null),c-=i?i.length:0,t&I){var u=r,h=i;r=i=null}var f=l?null:_a(e),p=[e,t,n,r,i,u,h,o,s,a];if(f&&(Mr(p,f),t=p[1],a=p[9]),p[9]=null==a?l?0:e.length:ea(a-c,0)||0,t==k)var d=or(p[0],p[2]);else d=t!=D&&t!=(k|D)||p[4].length?wr.apply(T,p):Cr.apply(T,p);var g=f?xa:Ta;return g(d,p)}function Tr(e,t,n,r,i,o,s){var a=-1,l=e.length,c=t.length,u=!0;if(l!=c&&!(i&&c>l))return!1;for(;u&&++a<l;){var h=e[a],f=t[a];if(u=T,r&&(u=i?r(f,h,a):r(h,f,a)),"undefined"==typeof u)if(i)for(var p=c;p--&&(f=t[p],!(u=h&&h===f||n(h,f,r,i,o,s))););else u=h&&h===f||n(h,f,r,i,o,s)}return!!u}function Er(e,t,n){switch(n){case K:case X:return+e==+t;case G:return e.name==t.name&&e.message==t.message;case Q:return e!=+e?t!=+t:0==e?1/e==1/t:e==+t;case et:case nt:return e==t+""}return!1}function kr(e,t,n,r,i,o,s){var a=yl(e),l=a.length,c=yl(t),u=c.length;if(l!=u&&!i)return!1;for(var h=i,f=-1;++f<l;){var p=a[f],d=i?p in t:Os.call(t,p);if(d){var g=e[p],v=t[p];d=T,r&&(d=i?r(v,g,p):r(g,v,p)),"undefined"==typeof d&&(d=g&&g===v||n(g,v,r,i,o,s))}if(!d)return!1;h||(h="constructor"==p)}if(!h){var m=e.constructor,y=t.constructor;if(m!=y&&"constructor"in e&&"constructor"in t&&!("function"==typeof m&&m instanceof m&&"function"==typeof y&&y instanceof y))return!1}return!0}function Ar(e,t,n){var r=n?aa:sa,i=r,o=i;return ma(e,function(e,s,a){var l=t(e,s,a);((n?i>l:l>i)||l===r&&l===o)&&(i=l,o=e)}),o}function jr(e,n,r){var i=t.callback||es;return i=i===es?vn:i,r?i(e,n,r):i}function Nr(e,n,r){var i=t.indexOf||oi;return i=i===oi?o:i,e?i(e,n,r):i}function Or(e,t,n){for(var r=-1,i=n?n.length:0;++r<i;){var o=n[r],s=o.size;switch(o.type){case"drop":e+=s;break;case"dropRight":t-=s;break;case"take":t=ta(t,e+s);break;case"takeRight":e=ea(e,t-s)}}return{start:e,end:t}}function Dr(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&Os.call(e,"index")&&(n.index=e.index,n.input=e.input),n}function Ir(e){var t=e.constructor;return"function"==typeof t&&t instanceof t||(t=xs),new t}function Rr(e,t,n){var r=e.constructor;switch(t){case it:return Qn(e);case K:case X:return new r(+e);case ot:case st:case at:case lt:case ct:case ut:case ht:case ft:case pt:var i=e.buffer;return new r(n?Qn(i):i,e.byteOffset,e.length);case Q:case nt:return new r(e);case et:var o=new r(e.source,Et.exec(e));o.lastIndex=e.lastIndex}return o}function Lr(e,t){return e=+e,t=null==t?fa:t,e>-1&&e%1==0&&t>e}function Pr(e,t,n){if(!fo(n))return!1;var r=typeof t;if("number"==r)var i=n.length,o=Hr(i)&&Lr(t,i);else o="string"==r&&t in n;if(o){var s=n[t];return e===e?e===s:s!==s}return!1}function Fr(e){var n=Sa(e);return!!n&&e===t[n]&&n in Z.prototype}function Hr(e){return"number"==typeof e&&e>-1&&e%1==0&&fa>=e}function qr(e){return e===e&&(0===e?1/e>0:!fo(e))}function Mr(e,t){var n=e[1],r=t[1],i=n|r,o=R>i,s=r==R&&n==N||r==R&&n==L&&e[7].length<=t[8]||r==(R|L)&&n==N;if(!o&&!s)return e;r&k&&(e[2]=t[2],i|=n&k?0:j);var a=t[3];if(a){var l=e[3];e[3]=l?Jn(l,a,t[4]):Yt(a),e[4]=l?b(e[3],B):Yt(t[4])}return a=t[5],a&&(l=e[5],e[5]=l?er(l,a,t[6]):Yt(a),e[6]=l?b(e[5],B):Yt(t[6])),a=t[7],a&&(e[7]=Yt(a)),r&R&&(e[8]=null==e[8]?t[8]:ta(e[8],t[8])),null==e[9]&&(e[9]=t[9]),e[0]=t[0],e[1]=i,e}function Wr(e,t){e=Kr(e);for(var n=-1,r=t.length,i={};++n<r;){var o=t[n];o in e&&(i[o]=e[o])}return i}function Ur(e,t){var n={};return Tn(e,function(e,r,i){t(e,r,i)&&(n[r]=e)}),n}function zr(e,t){for(var n=e.length,r=ta(t.length,n),i=Yt(e);r--;){var o=t[r];e[r]=Lr(o,n)?i[o]:T}return e}function Br(e){{var n;t.support}if(!m(e)||Is.call(e)!=J||!Os.call(e,"constructor")&&(n=e.constructor,"function"==typeof n&&!(n instanceof n)))return!1;var r;return Tn(e,function(e,t){r=t}),"undefined"==typeof r||Os.call(e,r)}function Vr(e){for(var n=jo(e),r=n.length,i=r&&e.length,o=t.support,s=i&&Hr(i)&&(sl(e)||o.nonEnumArgs&&oo(e)),a=-1,l=[];++a<r;){var c=n[a];(s&&Lr(c,i)||Os.call(e,c))&&l.push(c)}return l}function $r(e){return null==e?[]:Hr(e.length)?fo(e)?e:xs(e):Ro(e)}function Kr(e){return fo(e)?e:xs(e)}function Xr(e){return e instanceof Z?e.clone():new y(e.__wrapped__,e.__chain__,Yt(e.__actions__))}function Gr(e,t,n){t=(n?Pr(e,t,n):null==t)?1:ea(+t||1,1);for(var r=0,i=e?e.length:0,o=-1,s=gs(Hs(i/t));i>r;)s[++o]=Mn(e,r,r+=t);return s}function Yr(e){for(var t=-1,n=e?e.length:0,r=-1,i=[];++t<n;){var o=e[t];o&&(i[++r]=o)}return i}function Zr(e,t,n){var r=e?e.length:0;return r?((n?Pr(e,t,n):null==t)&&(t=1),Mn(e,0>t?0:t)):[]}function Qr(e,t,n){var r=e?e.length:0;return r?((n?Pr(e,t,n):null==t)&&(t=1),t=r-(+t||0),Mn(e,0,0>t?0:t)):[]}function Jr(e,t,n){return e&&e.length?Kn(e,jr(t,n,3),!0,!0):[]}function ei(e,t,n){return e&&e.length?Kn(e,jr(t,n,3),!0):[]}function ti(e,t,n,r){var i=e?e.length:0;return i?(n&&"number"!=typeof n&&Pr(e,t,n)&&(n=0,r=i),xn(e,t,n,r)):[]}function ni(e){return e?e[0]:T}function ri(e,t,n){var r=e?e.length:0;return n&&Pr(e,t,n)&&(t=!1),r?Sn(e,t):[]}function ii(e){var t=e?e.length:0;return t?Sn(e,!0):[]}function oi(e,t,n){var r=e?e.length:0;if(!r)return-1;if("number"==typeof n)n=0>n?ea(r+n,0):n;else if(n){var i=Gn(e,t),s=e[i];return(t===t?t===s:s!==s)?i:-1}return o(e,t,n||0)}function si(e){return Qr(e,1)}function ai(){for(var e=[],t=-1,n=arguments.length,r=[],i=Nr(),s=i==o;++t<n;){var a=arguments[t];(sl(a)||oo(a))&&(e.push(a),r.push(s&&a.length>=120?Ca(t&&a):null))}n=e.length;var l=e[0],c=-1,u=l?l.length:0,h=[],f=r[0];e:for(;++c<u;)if(a=l[c],(f?Xt(f,a):i(h,a,0))<0){for(t=n;--t;){var p=r[t];if((p?Xt(p,a):i(e[t],a,0))<0)continue e}f&&f.push(a),h.push(a)}return h}function li(e){var t=e?e.length:0;return t?e[t-1]:T}function ci(e,t,n){var r=e?e.length:0;if(!r)return-1;var i=r;if("number"==typeof n)i=(0>n?ea(r+n,0):ta(n||0,r-1))+1;else if(n){i=Gn(e,t,!0)-1;var o=e[i];return(t===t?t===o:o!==o)?i:-1}if(t!==t)return v(e,i,!0);for(;i--;)if(e[i]===t)return i;return-1}function ui(){var e=arguments,t=e[0];if(!t||!t.length)return t;for(var n=0,r=Nr(),i=e.length;++n<i;)for(var o=0,s=e[n];(o=r(t,s,o))>-1;)$s.call(t,o,1);return t}function hi(e,t,n){var r=-1,i=e?e.length:0,o=[];for(t=jr(t,n,3);++r<i;){var s=e[r];t(s,r,e)&&(o.push(s),$s.call(e,r--,1),i--)}return o}function fi(e){return Zr(e,1)}function pi(e,t,n){var r=e?e.length:0;return r?(n&&"number"!=typeof n&&Pr(e,t,n)&&(t=0,n=r),Mn(e,t,n)):[]}function di(e,t,n){var r=e?e.length:0;return r?((n?Pr(e,t,n):null==t)&&(t=1),Mn(e,0,0>t?0:t)):[]}function gi(e,t,n){var r=e?e.length:0;return r?((n?Pr(e,t,n):null==t)&&(t=1),t=r-(+t||0),Mn(e,0>t?0:t)):[]}function vi(e,t,n){return e&&e.length?Kn(e,jr(t,n,3),!1,!0):[]}function mi(e,t,n){return e&&e.length?Kn(e,jr(t,n,3)):[]}function yi(e,t,n,r){var i=e?e.length:0;if(!i)return[];null!=t&&"boolean"!=typeof t&&(r=n,n=Pr(e,t,r)?null:t,t=!1);var s=jr();return(s!==vn||null!=n)&&(n=s(n,r,3)),t&&Nr()==o?w(e,n):Vn(e,n)}function bi(e){for(var t=-1,n=(e&&e.length&&on(rn(e,Ns)))>>>0,r=gs(n);++t<n;)r[t]=rn(e,Fn(t));return r}function wi(){for(var e=-1,t=arguments.length;++e<t;){var n=arguments[e];if(sl(n)||oo(n))var r=r?bn(r,n).concat(bn(n,r)):n}return r?Vn(r):[]}function xi(e,t){var n=-1,r=e?e.length:0,i={};for(!r||t||sl(e[0])||(t=[]);++n<r;){var o=e[n];t?i[o]=t[n]:o&&(i[o[0]]=o[1])}return i}function Ci(e){var n=t(e);return n.__chain__=!0,n}function _i(e,t,n){return t.call(n,e),e}function Si(e,t,n){return t.call(n,e)}function Ti(){return Ci(this)}function Ei(){return new y(this.value(),this.__chain__)}function ki(e){for(var t,r=this;r instanceof n;){var i=Xr(r);t?o.__wrapped__=i:t=i;var o=i;r=r.__wrapped__}return o.__wrapped__=e,t}function Ai(){var e=this.__wrapped__;return e instanceof Z?(this.__actions__.length&&(e=new Z(this)),new y(e.reverse(),this.__chain__)):this.thru(function(e){return e.reverse()})}function ji(){return this.value()+""}function Ni(){return Xn(this.__wrapped__,this.__actions__)}function Oi(e,t,n){var r=sl(e)?tn:wn;return n&&Pr(e,t,n)&&(t=null),("function"!=typeof t||"undefined"!=typeof n)&&(t=jr(t,n,3)),r(e,t)}function Di(e,t,n){var r=sl(e)?nn:Cn;return t=jr(t,n,3),r(e,t)}function Ii(e,t){return Fa(e,In(t))}function Ri(e,t,n,r){var i=e?e.length:0;return Hr(i)||(e=Ro(e),i=e.length),i?(n="number"!=typeof n||r&&Pr(t,n,r)?0:0>n?ea(i+n,0):n||0,"string"==typeof e||!sl(e)&&wo(e)?i>n&&e.indexOf(t,n)>-1:Nr(e,t,n)>-1):!1}function Li(e,t,n){var r=sl(e)?rn:Dn;return t=jr(t,n,3),r(e,t)}function Pi(e,t){return Li(e,Fn(t))}function Fi(e,t,n){var r=sl(e)?nn:Cn;return t=jr(t,n,3),r(e,function(e,n,r){return!t(e,n,r)})}function Hi(e,t,n){if(n?Pr(e,t,n):null==t){e=$r(e);var r=e.length;return r>0?e[Hn(0,r-1)]:T}var i=qi(e);return i.length=ta(0>t?0:+t||0,i.length),i}function qi(e){e=$r(e);for(var t=-1,n=e.length,r=gs(n);++t<n;){var i=Hn(0,t);t!=i&&(r[t]=r[i]),r[i]=e[t]}return r}function Mi(e){var t=e?e.length:0;return Hr(t)?t:yl(e).length}function Wi(e,t,n){var r=sl(e)?cn:Wn;return n&&Pr(e,t,n)&&(t=null),("function"!=typeof t||"undefined"!=typeof n)&&(t=jr(t,n,3)),r(e,t)}function Ui(e,t,n){if(null==e)return[];var r=-1,i=e.length,o=Hr(i)?gs(i):[];return n&&Pr(e,t,n)&&(t=null),t=jr(t,n,3),ma(e,function(e,n,i){o[++r]={criteria:t(e,n,i),index:r,value:e}}),Un(o,h)}function zi(){var e=arguments,t=e[0],n=e[3],r=0,i=e.length-1;if(null==t)return[];for(var o=gs(i);i>r;)o[r]=e[++r];return n&&Pr(e[1],e[2],n)&&(o=e[1]),zn(t,Sn(o),[])}function Bi(e,t,n,r){return null==e?[]:(r&&Pr(t,n,r)&&(n=null),sl(t)||(t=null==t?[]:[t]),sl(n)||(n=null==n?[]:[n]),zn(e,t,n))}function Vi(e,t){return Di(e,In(t))}function $i(e,t){if("function"!=typeof t){if("function"!=typeof e)throw new Ss(z);var n=e;e=t,t=n}return e=Qs(e=+e)?e:0,function(){return--e<1?t.apply(this,arguments):void 0}}function Ki(e,t,n){return n&&Pr(e,t,n)&&(t=null),t=e&&null==t?e.length:ea(+t||0,0),Sr(e,R,null,null,null,null,t)}function Xi(e,t){var n;if("function"!=typeof t){if("function"!=typeof e)throw new Ss(z);var r=e;e=t,t=r}return function(){return--e>0?n=t.apply(this,arguments):t=null,n}}function Gi(e,t,n){function r(){f&&qs(f),l&&qs(l),l=f=p=T}function i(){var n=t-(Ka()-u);if(0>=n||n>t){l&&qs(l);var r=p;l=f=p=T,r&&(d=Ka(),c=e.apply(h,a),f||l||(a=h=null))}else f=Vs(i,n)}function o(){f&&qs(f),l=f=p=T,(v||g!==t)&&(d=Ka(),c=e.apply(h,a),f||l||(a=h=null))}function s(){if(a=arguments,u=Ka(),h=this,p=v&&(f||!m),g===!1)var n=m&&!f;else{l||m||(d=u);var r=g-(u-d),s=0>=r||r>g;s?(l&&(l=qs(l)),d=u,c=e.apply(h,a)):l||(l=Vs(o,r))}return s&&f?f=qs(f):f||t===g||(f=Vs(i,t)),n&&(s=!0,c=e.apply(h,a)),!s||f||l||(a=h=null),c}var a,l,c,u,h,f,p,d=0,g=!1,v=!0;if("function"!=typeof e)throw new Ss(z);if(t=0>t?0:+t||0,n===!0){var m=!0;v=!1}else fo(n)&&(m=n.leading,g="maxWait"in n&&ea(+n.maxWait||0,t),v="trailing"in n?n.trailing:v);return s.cancel=r,s}function Yi(e,t){if("function"!=typeof e||t&&"function"!=typeof t)throw new Ss(z);var n=function(){var r=arguments,i=n.cache,o=t?t.apply(this,r):r[0];if(i.has(o))return i.get(o);var s=e.apply(this,r);return i.set(o,s),s};return n.cache=new Yi.Cache,n}function Zi(e){if("function"!=typeof e)throw new Ss(z);return function(){return!e.apply(this,arguments)}}function Qi(e){return Xi(e,2)}function Ji(e,t){if("function"!=typeof e)throw new Ss(z);return t=ea("undefined"==typeof t?e.length-1:+t||0,0),function(){for(var n=arguments,r=-1,i=ea(n.length-t,0),o=gs(i);++r<i;)o[r]=n[t+r];switch(t){case 0:return e.call(this,o);case 1:return e.call(this,n[0],o);case 2:return e.call(this,n[0],n[1],o)}var s=gs(t+1);for(r=-1;++r<t;)s[r]=n[r];return s[t]=o,e.apply(this,s)}}function eo(e){if("function"!=typeof e)throw new Ss(z);return function(t){return e.apply(this,t)}}function to(e,t,n){var r=!0,i=!0;if("function"!=typeof e)throw new Ss(z);return n===!1?r=!1:fo(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),Mt.leading=r,Mt.maxWait=+t,Mt.trailing=i,Gi(e,t,Mt)}function no(e,t){return t=null==t?ns:t,Sr(t,D,null,[e],[])}function ro(e,t,n,r){return t&&"boolean"!=typeof t&&Pr(e,t,n)?t=!1:"function"==typeof t&&(r=n,n=t,t=!1),n="function"==typeof n&&Zn(n,r,1),mn(e,t,n)}function io(e,t,n){return t="function"==typeof t&&Zn(t,n,1),mn(e,!0,t)}function oo(e){var t=m(e)?e.length:T;return Hr(t)&&Is.call(e)==V}function so(e){return e===!0||e===!1||m(e)&&Is.call(e)==K}function ao(e){return m(e)&&Is.call(e)==X}function lo(e){return!!e&&1===e.nodeType&&m(e)&&Is.call(e).indexOf("Element")>-1}function co(e){if(null==e)return!0;var t=e.length;return Hr(t)&&(sl(e)||wo(e)||oo(e)||m(e)&&ll(e.splice))?!t:!yl(e).length}function uo(e,t,n,r){if(n="function"==typeof n&&Zn(n,r,3),!n&&qr(e)&&qr(t))return e===t;var i=n?n(e,t):T;return"undefined"==typeof i?jn(e,t,n):!!i}function ho(e){return m(e)&&"string"==typeof e.message&&Is.call(e)==G}function fo(e){var t=typeof e;return"function"==t||!!e&&"object"==t}function po(e,t,n,r){var i=yl(t),o=i.length;if(!o)return!0;if(null==e)return!1;if(n="function"==typeof n&&Zn(n,r,3),!n&&1==o){var s=i[0],a=t[s];if(qr(a))return a===e[s]&&("undefined"!=typeof a||s in Kr(e))}for(var l=gs(o),c=gs(o);o--;)a=l[o]=t[i[o]],c[o]=qr(a);return On(Kr(e),i,l,c,n)}function go(e){return yo(e)&&e!=+e}function vo(e){return null==e?!1:Is.call(e)==Y?Ls.test(js.call(e)):m(e)&&At.test(e)}function mo(e){return null===e}function yo(e){return"number"==typeof e||m(e)&&Is.call(e)==Q}function bo(e){return m(e)&&Is.call(e)==et||!1}function wo(e){return"string"==typeof e||m(e)&&Is.call(e)==nt}function xo(e){return m(e)&&Hr(e.length)&&!!Ht[Is.call(e)]}function Co(e){return"undefined"==typeof e}function _o(e){var t=e?e.length:0;return Hr(t)?t?Yt(e):[]:Ro(e)}function So(e){return gn(e,jo(e))}function To(e,t,n){var r=va(e);return n&&Pr(e,t,n)&&(t=null),t?gn(t,r,yl(t)):r}function Eo(e){return An(e,jo(e))}function ko(e,t){return e?Os.call(e,t):!1}function Ao(e,t,n){n&&Pr(e,t,n)&&(t=null);for(var r=-1,i=yl(e),o=i.length,s={};++r<o;){var a=i[r],l=e[a];t?Os.call(s,l)?s[l].push(a):s[l]=[a]:s[l]=a}return s}function jo(e){if(null==e)return[];fo(e)||(e=xs(e));var t=e.length;t=t&&Hr(t)&&(sl(e)||ga.nonEnumArgs&&oo(e))&&t||0;for(var n=e.constructor,r=-1,i="function"==typeof n&&n.prototype===e,o=gs(t),s=t>0;++r<t;)o[r]=r+"";for(var a in e)s&&Lr(a,t)||"constructor"==a&&(i||!Os.call(e,a))||o.push(a);return o}function No(e,t,n){var r={};return t=jr(t,n,3),En(e,function(e,n,i){r[n]=t(e,n,i)}),r}function Oo(e){for(var t=-1,n=yl(e),r=n.length,i=gs(r);++t<r;){var o=n[t];i[t]=[o,e[o]]}return i}function Do(e,t,n){var r=null==e?T:e[t];return"undefined"==typeof r&&(r=n),ll(r)?r.call(e):r}function Io(e,t,n,r){var i=sl(e)||xo(e);if(t=jr(t,r,4),null==n)if(i||fo(e)){var o=e.constructor;n=i?sl(e)?new o:[]:va(ll(o)&&o.prototype)}else n={};return(i?Zt:En)(e,function(e,r,i){return t(n,e,r,i)}),n}function Ro(e){return $n(e,yl(e))}function Lo(e){return $n(e,jo(e))}function Po(e,t,n){return t=+t||0,"undefined"==typeof n?(n=t,t=0):n=+n||0,e>=t&&n>e}function Fo(e,t,n){n&&Pr(e,t,n)&&(t=n=null);var r=null==e,i=null==t;if(null==n&&(i&&"boolean"==typeof e?(n=e,e=1):"boolean"==typeof t&&(n=t,i=!0)),r&&i&&(t=1,i=!1),e=+e||0,i?(t=e,e=0):t=+t||0,n||e%1||t%1){var o=oa();return ta(e+o*(t-e+parseFloat("1e-"+((o+"").length-1))),t)}return Hn(e,t)}function Ho(e){return e=a(e),e&&e.charAt(0).toUpperCase()+e.slice(1)}function qo(e){return e=a(e),e&&e.replace(jt,p).replace(St,"")}function Mo(e,t,n){e=a(e),t+="";var r=e.length;return n="undefined"==typeof n?r:ta(0>n?0:+n||0,r),n-=t.length,n>=0&&e.indexOf(t,n)==n}function Wo(e){return e=a(e),e&&wt.test(e)?e.replace(yt,d):e}function Uo(e){return e=a(e),e&&Dt.test(e)?e.replace(Ot,"\\$&"):e}function zo(e,t,n){e=a(e),t=+t;var r=e.length;if(r>=t||!Qs(t))return e;var i=(t-r)/2,o=Ms(i),s=Hs(i);return n=xr("",s,n),n.slice(0,o)+e+n}function Bo(e,t,n){return n&&Pr(e,t,n)&&(t=0),ia(e,t)}function Vo(e,t){var n="";if(e=a(e),t=+t,1>t||!e||!Qs(t))return n;do t%2&&(n+=e),t=Ms(t/2),e+=e;while(t);return n}function $o(e,t,n){return e=a(e),n=null==n?0:ta(0>n?0:+n||0,e.length),e.lastIndexOf(t,n)==n}function Ko(e,n,r){var i=t.templateSettings;r&&Pr(e,n,r)&&(n=r=null),e=a(e),n=pn(pn({},r||n),i,fn);var o,s,l=pn(pn({},n.imports),i.imports,fn),c=yl(l),u=$n(l,c),h=0,f=n.interpolate||Nt,p="__p += '",d=Cs((n.escape||Nt).source+"|"+f.source+"|"+(f===_t?Tt:Nt).source+"|"+(n.evaluate||Nt).source+"|$","g"),v="//# sourceURL="+("sourceURL"in n?n.sourceURL:"lodash.templateSources["+ ++Ft+"]")+"\n";e.replace(d,function(t,n,r,i,a,l){return r||(r=i),p+=e.slice(h,l).replace(It,g),n&&(o=!0,p+="' +\n__e("+n+") +\n'"),a&&(s=!0,p+="';\n"+a+";\n__p += '"),r&&(p+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),h=l+t.length,t}),p+="';\n";var m=n.variable;m||(p="with (obj) {\n"+p+"\n}\n"),p=(s?p.replace(dt,""):p).replace(gt,"$1").replace(vt,"$1;"),p="function("+(m||"obj")+") {\n"+(m?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(s?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var y=Al(function(){return ys(c,v+"return "+p).apply(T,u)});if(y.source=p,ho(y))throw y;return y}function Xo(e,t,n){var r=e;return(e=a(e))?(n?Pr(r,t,n):null==t)?e.slice(x(e),C(e)+1):(t+="",e.slice(c(e,t),u(e,t)+1)):e}function Go(e,t,n){var r=e;return e=a(e),e?e.slice((n?Pr(r,t,n):null==t)?x(e):c(e,t+"")):e}function Yo(e,t,n){var r=e;return e=a(e),e?(n?Pr(r,t,n):null==t)?e.slice(0,C(e)+1):e.slice(0,u(e,t+"")+1):e}function Zo(e,t,n){n&&Pr(e,t,n)&&(t=null);var r=P,i=F;if(null!=t)if(fo(t)){var o="separator"in t?t.separator:o;r="length"in t?+t.length||0:r,i="omission"in t?a(t.omission):i}else r=+t||0;if(e=a(e),r>=e.length)return e;var s=r-i.length;if(1>s)return i;var l=e.slice(0,s);if(null==o)return l+i;if(bo(o)){if(e.slice(s).search(o)){var c,u,h=e.slice(0,s);for(o.global||(o=Cs(o.source,(Et.exec(o)||"")+"g")),o.lastIndex=0;c=o.exec(h);)u=c.index;l=l.slice(0,null==u?s:u)}}else if(e.indexOf(o,s)!=s){var f=l.lastIndexOf(o);f>-1&&(l=l.slice(0,f))}return l+i}function Qo(e){return e=a(e),e&&bt.test(e)?e.replace(mt,_):e}function Jo(e,t,n){return n&&Pr(e,t,n)&&(t=null),e=a(e),e.match(t||Rt)||[]}function es(e,t,n){return n&&Pr(e,t,n)&&(t=null),m(e)?rs(e):vn(e,t)}function ts(e){return function(){return e}}function ns(e){return e}function rs(e){return In(mn(e,!0))}function is(e,t){return Rn(e+"",mn(t,!0))}function os(e,t,n){if(null==n){var r=fo(t),i=r&&yl(t),o=i&&i.length&&An(t,i);(o?o.length:r)||(o=!1,n=t,t=e,e=this)}o||(o=An(t,yl(t)));var s=!0,a=-1,l=ll(e),c=o.length;n===!1?s=!1:fo(n)&&"chain"in n&&(s=n.chain);for(;++a<c;){var u=o[a],h=t[u];e[u]=h,l&&(e.prototype[u]=function(t){return function(){var n=this.__chain__;if(s||n){var r=e(this.__wrapped__),i=r.__actions__=Yt(this.__actions__);return i.push({func:t,args:arguments,thisArg:e}),r.__chain__=n,r}var o=[this.value()];return Us.apply(o,arguments),t.apply(e,o)}}(h))}return e}function ss(){return e._=Rs,this}function as(){}function ls(e){return Fn(e+"")}function cs(e){return function(t){return null==e?T:e[t]}}function us(e,t,n){n&&Pr(e,t,n)&&(t=n=null),e=+e||0,n=null==n?1:+n||0,null==t?(t=e,e=0):t=+t||0;for(var r=-1,i=ea(Hs((t-e)/(n||1)),0),o=gs(i);++r<i;)o[r]=e,e+=n;return o}function hs(e,t,n){if(e=+e,1>e||!Qs(e))return[];var r=-1,i=gs(ta(e,la));for(t=Zn(t,n,1);++r<e;)la>r?i[r]=t(r):t(r);return i}function fs(e){var t=++Ds;return a(e)+t}function ps(e,t){return e+t}function ds(e,t,n){n&&Pr(e,t,n)&&(t=null);var r=jr(),i=null==t;return r===vn&&i||(i=!1,t=r(t,n,3)),i?un(sl(e)?e:$r(e)):Bn(e,t)}e=e?Jt.defaults(Qt.Object(),e,Jt.pick(Qt,Pt)):Qt;var gs=e.Array,vs=e.Date,ms=e.Error,ys=e.Function,bs=e.Math,ws=e.Number,xs=e.Object,Cs=e.RegExp,_s=e.String,Ss=e.TypeError,Ts=gs.prototype,Es=xs.prototype,ks=_s.prototype,As=(As=e.window)&&As.document,js=ys.prototype.toString,Ns=Fn("length"),Os=Es.hasOwnProperty,Ds=0,Is=Es.toString,Rs=e._,Ls=Cs("^"+Uo(Is).replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Ps=vo(Ps=e.ArrayBuffer)&&Ps,Fs=vo(Fs=Ps&&new Ps(0).slice)&&Fs,Hs=bs.ceil,qs=e.clearTimeout,Ms=bs.floor,Ws=vo(Ws=xs.getPrototypeOf)&&Ws,Us=Ts.push,zs=Es.propertyIsEnumerable,Bs=vo(Bs=e.Set)&&Bs,Vs=e.setTimeout,$s=Ts.splice,Ks=vo(Ks=e.Uint8Array)&&Ks,Xs=vo(Xs=e.WeakMap)&&Xs,Gs=function(){try{var t=vo(t=e.Float64Array)&&t,n=new t(new Ps(10),0,1)&&t
}catch(r){}return n}(),Ys=vo(Ys=gs.isArray)&&Ys,Zs=vo(Zs=xs.create)&&Zs,Qs=e.isFinite,Js=vo(Js=xs.keys)&&Js,ea=bs.max,ta=bs.min,na=vo(na=vs.now)&&na,ra=vo(ra=ws.isFinite)&&ra,ia=e.parseInt,oa=bs.random,sa=ws.NEGATIVE_INFINITY,aa=ws.POSITIVE_INFINITY,la=bs.pow(2,32)-1,ca=la-1,ua=la>>>1,ha=Gs?Gs.BYTES_PER_ELEMENT:0,fa=bs.pow(2,53)-1,pa=Xs&&new Xs,da={},ga=t.support={};!function(){ga.funcDecomp=/\bthis\b/.test(function(){return this}),ga.funcNames="string"==typeof ys.name;try{ga.dom=11===As.createDocumentFragment().nodeType}catch(e){ga.dom=!1}try{ga.nonEnumArgs=!zs.call(arguments,1)}catch(e){ga.nonEnumArgs=!0}}(0,0),t.templateSettings={escape:xt,evaluate:Ct,interpolate:_t,variable:"",imports:{_:t}};var va=function(){function t(){}return function(n){if(fo(n)){t.prototype=n;var r=new t;t.prototype=null}return r||e.Object()}}(),ma=rr(En),ya=rr(kn,!0),ba=ir(),wa=ir(!0),xa=pa?function(e,t){return pa.set(e,t),e}:ns;Fs||(Qn=Ps&&Ks?function(e){var t=e.byteLength,n=Gs?Ms(t/ha):0,r=n*ha,i=new Ps(t);if(n){var o=new Gs(i,0,n);o.set(new Gs(e,0,n))}return t!=r&&(o=new Ks(i,r),o.set(new Ks(e,r))),i}:ts(null));var Ca=Zs&&Bs?function(e){return new Kt(e)}:ts(null),_a=pa?function(e){return pa.get(e)}:as,Sa=function(){return ga.funcNames?"constant"==ts.name?Fn("name"):function(e){for(var t=e.name,n=da[t],r=n?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==e)return i.name}return t}:ts("")}(),Ta=function(){var e=0,t=0;return function(n,r){var i=Ka(),o=q-(i-t);if(t=i,o>0){if(++e>=H)return n}else e=0;return xa(n,r)}}(),Ea=Ji(function(e,t){return sl(e)||oo(e)?bn(e,Sn(t,!1,!0)):[]}),ka=hr(),Aa=hr(!0),ja=Ji(function(e,t){e||(e=[]),t=Sn(t);var n=t.length,i=dn(e,t);for(t.sort(r);n--;){var o=parseFloat(t[n]);if(o!=s&&Lr(o)){var s=o;$s.call(e,o,1)}}return i}),Na=_r(),Oa=_r(!0),Da=Ji(function(e){return Vn(Sn(e,!1,!0))}),Ia=Ji(function(e,t){return sl(e)||oo(e)?bn(e,t):[]}),Ra=Ji(bi),La=Ji(function(e,t){var n=e?e.length:0;return Hr(n)&&(e=$r(e)),dn(e,Sn(t))}),Pa=tr(function(e,t,n){Os.call(e,n)?++e[n]:e[n]=1}),Fa=ur(ma),Ha=ur(ya,!0),qa=dr(Zt,ma),Ma=dr(en,ya),Wa=tr(function(e,t,n){Os.call(e,n)?e[n].push(t):e[n]=[t]}),Ua=tr(function(e,t,n){e[n]=t}),za=Ji(function(e,t,n){var r=-1,i="function"==typeof t,o=e?e.length:0,s=Hr(o)?gs(o):[];return ma(e,function(e){var o=i?t:null!=e&&e[t];s[++r]=o?o.apply(e,n):T}),s}),Ba=tr(function(e,t,n){e[n?0:1].push(t)},function(){return[[],[]]}),Va=br(an,ma),$a=br(ln,ya),Ka=na||function(){return(new vs).getTime()},Xa=Ji(function(e,t,n){var r=k;if(n.length){var i=b(n,Xa.placeholder);r|=D}return Sr(e,r,t,n,i)}),Ga=Ji(function(e,t){t=t.length?Sn(t):Eo(e);for(var n=-1,r=t.length;++n<r;){var i=t[n];e[i]=Sr(e[i],k,e)}return e}),Ya=Ji(function(e,t,n){var r=k|A;if(n.length){var i=b(n,Ya.placeholder);r|=D}return Sr(t,r,e,n,i)}),Za=lr(N),Qa=lr(O),Ja=Ji(function(e,t){return yn(e,1,t)}),el=Ji(function(e,t,n){return yn(e,t,n)}),tl=pr(),nl=pr(!0),rl=yr(D),il=yr(I),ol=Ji(function(e,t){return Sr(e,L,null,null,null,Sn(t))}),sl=Ys||function(e){return m(e)&&Hr(e.length)&&Is.call(e)==$};ga.dom||(lo=function(e){return!!e&&1===e.nodeType&&m(e)&&!cl(e)});var al=ra||function(e){return"number"==typeof e&&Qs(e)},ll=s(/x/)||Ks&&!s(Ks)?function(e){return Is.call(e)==Y}:s,cl=Ws?function(e){if(!e||Is.call(e)!=J)return!1;var t=e.valueOf,n=vo(t)&&(n=Ws(t))&&Ws(n);return n?e==n||Ws(e)==n:Br(e)}:Br,ul=nr(pn),hl=Ji(function(e){var t=e[0];return null==t?t:(e.push(hn),ul.apply(T,e))}),fl=fr(En),pl=fr(kn),dl=gr(ba),gl=gr(wa),vl=vr(En),ml=vr(kn),yl=Js?function(e){if(e)var t=e.constructor,n=e.length;return"function"==typeof t&&t.prototype===e||"function"!=typeof e&&n&&Hr(n)?Vr(e):fo(e)?Js(e):[]}:Vr,bl=nr(Ln),wl=Ji(function(e,t){if(null==e)return{};if("function"!=typeof t[0]){var t=rn(Sn(t),_s);return Wr(e,bn(jo(e),t))}var n=Zn(t[0],t[1],3);return Ur(e,function(e,t,r){return!n(e,t,r)})}),xl=Ji(function(e,t){return null==e?{}:"function"==typeof t[0]?Ur(e,Zn(t[0],t[1],3)):Wr(e,Sn(t))}),Cl=sr(function(e,t,n){return t=t.toLowerCase(),e+(n?t.charAt(0).toUpperCase()+t.slice(1):t)}),_l=sr(function(e,t,n){return e+(n?"-":"")+t.toLowerCase()}),Sl=mr(),Tl=mr(!0);8!=ia(Lt+"08")&&(Bo=function(e,t,n){return(n?Pr(e,t,n):null==t)?t=0:t&&(t=+t),e=Xo(e),ia(e,t||(kt.test(e)?16:10))});var El=sr(function(e,t,n){return e+(n?"_":"")+t.toLowerCase()}),kl=sr(function(e,t,n){return e+(n?" ":"")+(t.charAt(0).toUpperCase()+t.slice(1))}),Al=Ji(function(e,t){try{return e.apply(T,t)}catch(n){return ho(n)?n:new ms(n)}}),jl=cr(on),Nl=cr(sn,!0);return t.prototype=n.prototype,y.prototype=va(n.prototype),y.prototype.constructor=y,Z.prototype=va(n.prototype),Z.prototype.constructor=Z,Ut.prototype["delete"]=zt,Ut.prototype.get=Bt,Ut.prototype.has=Vt,Ut.prototype.set=$t,Kt.prototype.push=Gt,Yi.Cache=Ut,t.after=$i,t.ary=Ki,t.assign=ul,t.at=La,t.before=Xi,t.bind=Xa,t.bindAll=Ga,t.bindKey=Ya,t.callback=es,t.chain=Ci,t.chunk=Gr,t.compact=Yr,t.constant=ts,t.countBy=Pa,t.create=To,t.curry=Za,t.curryRight=Qa,t.debounce=Gi,t.defaults=hl,t.defer=Ja,t.delay=el,t.difference=Ea,t.drop=Zr,t.dropRight=Qr,t.dropRightWhile=Jr,t.dropWhile=ei,t.fill=ti,t.filter=Di,t.flatten=ri,t.flattenDeep=ii,t.flow=tl,t.flowRight=nl,t.forEach=qa,t.forEachRight=Ma,t.forIn=dl,t.forInRight=gl,t.forOwn=vl,t.forOwnRight=ml,t.functions=Eo,t.groupBy=Wa,t.indexBy=Ua,t.initial=si,t.intersection=ai,t.invert=Ao,t.invoke=za,t.keys=yl,t.keysIn=jo,t.map=Li,t.mapValues=No,t.matches=rs,t.matchesProperty=is,t.memoize=Yi,t.merge=bl,t.mixin=os,t.negate=Zi,t.omit=wl,t.once=Qi,t.pairs=Oo,t.partial=rl,t.partialRight=il,t.partition=Ba,t.pick=xl,t.pluck=Pi,t.property=ls,t.propertyOf=cs,t.pull=ui,t.pullAt=ja,t.range=us,t.rearg=ol,t.reject=Fi,t.remove=hi,t.rest=fi,t.restParam=Ji,t.shuffle=qi,t.slice=pi,t.sortBy=Ui,t.sortByAll=zi,t.sortByOrder=Bi,t.spread=eo,t.take=di,t.takeRight=gi,t.takeRightWhile=vi,t.takeWhile=mi,t.tap=_i,t.throttle=to,t.thru=Si,t.times=hs,t.toArray=_o,t.toPlainObject=So,t.transform=Io,t.union=Da,t.uniq=yi,t.unzip=bi,t.values=Ro,t.valuesIn=Lo,t.where=Vi,t.without=Ia,t.wrap=no,t.xor=wi,t.zip=Ra,t.zipObject=xi,t.backflow=nl,t.collect=Li,t.compose=nl,t.each=qa,t.eachRight=Ma,t.extend=ul,t.iteratee=es,t.methods=Eo,t.object=xi,t.select=Di,t.tail=fi,t.unique=yi,os(t,t),t.add=ps,t.attempt=Al,t.camelCase=Cl,t.capitalize=Ho,t.clone=ro,t.cloneDeep=io,t.deburr=qo,t.endsWith=Mo,t.escape=Wo,t.escapeRegExp=Uo,t.every=Oi,t.find=Fa,t.findIndex=ka,t.findKey=fl,t.findLast=Ha,t.findLastIndex=Aa,t.findLastKey=pl,t.findWhere=Ii,t.first=ni,t.has=ko,t.identity=ns,t.includes=Ri,t.indexOf=oi,t.inRange=Po,t.isArguments=oo,t.isArray=sl,t.isBoolean=so,t.isDate=ao,t.isElement=lo,t.isEmpty=co,t.isEqual=uo,t.isError=ho,t.isFinite=al,t.isFunction=ll,t.isMatch=po,t.isNaN=go,t.isNative=vo,t.isNull=mo,t.isNumber=yo,t.isObject=fo,t.isPlainObject=cl,t.isRegExp=bo,t.isString=wo,t.isTypedArray=xo,t.isUndefined=Co,t.kebabCase=_l,t.last=li,t.lastIndexOf=ci,t.max=jl,t.min=Nl,t.noConflict=ss,t.noop=as,t.now=Ka,t.pad=zo,t.padLeft=Sl,t.padRight=Tl,t.parseInt=Bo,t.random=Fo,t.reduce=Va,t.reduceRight=$a,t.repeat=Vo,t.result=Do,t.runInContext=S,t.size=Mi,t.snakeCase=El,t.some=Wi,t.sortedIndex=Na,t.sortedLastIndex=Oa,t.startCase=kl,t.startsWith=$o,t.sum=ds,t.template=Ko,t.trim=Xo,t.trimLeft=Go,t.trimRight=Yo,t.trunc=Zo,t.unescape=Qo,t.uniqueId=fs,t.words=Jo,t.all=Oi,t.any=Wi,t.contains=Ri,t.detect=Fa,t.foldl=Va,t.foldr=$a,t.head=ni,t.include=Ri,t.inject=Va,os(t,function(){var e={};return En(t,function(n,r){t.prototype[r]||(e[r]=n)}),e}(),!1),t.sample=Hi,t.prototype.sample=function(e){return this.__chain__||null!=e?this.thru(function(t){return Hi(t,e)}):Hi(this.value())},t.VERSION=E,Zt(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){t[e].placeholder=t}),Zt(["dropWhile","filter","map","takeWhile"],function(e,t){var n=t!=U,r=t==M;Z.prototype[e]=function(e,i){var o=this.__filtered__,s=o&&r?new Z(this):this.clone(),a=s.__iteratees__||(s.__iteratees__=[]);return a.push({done:!1,count:0,index:0,iteratee:jr(e,i,1),limit:-1,type:t}),s.__filtered__=o||n,s}}),Zt(["drop","take"],function(e,t){var n=e+"While";Z.prototype[e]=function(n){var r=this.__filtered__,i=r&&!t?this.dropWhile():this.clone();if(n=null==n?1:ea(Ms(n)||0,0),r)t?i.__takeCount__=ta(i.__takeCount__,n):li(i.__iteratees__).limit=n;else{var o=i.__views__||(i.__views__=[]);o.push({size:n,type:e+(i.__dir__<0?"Right":"")})}return i},Z.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()},Z.prototype[e+"RightWhile"]=function(e,t){return this.reverse()[n](e,t).reverse()}}),Zt(["first","last"],function(e,t){var n="take"+(t?"Right":"");Z.prototype[e]=function(){return this[n](1).value()[0]}}),Zt(["initial","rest"],function(e,t){var n="drop"+(t?"":"Right");Z.prototype[e]=function(){return this[n](1)}}),Zt(["pluck","where"],function(e,t){var n=t?"filter":"map",r=t?In:Fn;Z.prototype[e]=function(e){return this[n](r(e))}}),Z.prototype.compact=function(){return this.filter(ns)},Z.prototype.reject=function(e,t){return e=jr(e,t,1),this.filter(function(t){return!e(t)})},Z.prototype.slice=function(e,t){e=null==e?0:+e||0;var n=0>e?this.takeRight(-e):this.drop(e);return"undefined"!=typeof t&&(t=+t||0,n=0>t?n.dropRight(-t):n.take(t-e)),n},Z.prototype.toArray=function(){return this.drop(0)},En(Z.prototype,function(e,n){var r=t[n];if(r){var i=/^(?:filter|map|reject)|While$/.test(n),o=/^(?:first|last)$/.test(n);t.prototype[n]=function(){var n=arguments,s=(n.length,this.__chain__),a=this.__wrapped__,l=!!this.__actions__.length,c=a instanceof Z,u=n[0],h=c||sl(a);h&&i&&"function"==typeof u&&1!=u.length&&(c=h=!1);var f=c&&!l;if(o&&!s)return f?e.call(a):r.call(t,this.value());var p=function(e){var i=[e];return Us.apply(i,n),r.apply(t,i)};if(h){var d=f?a:new Z(this),g=e.apply(d,n);if(!o&&(l||g.__actions__)){var v=g.__actions__||(g.__actions__=[]);v.push({func:Si,args:[p],thisArg:t})}return new y(g,s)}return this.thru(p)}}}),Zt(["concat","join","pop","push","replace","shift","sort","splice","split","unshift"],function(e){var n=(/^(?:replace|split)$/.test(e)?ks:Ts)[e],r=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",i=/^(?:join|pop|replace|shift)$/.test(e);t.prototype[e]=function(){var e=arguments;return i&&!this.__chain__?n.apply(this.value(),e):this[r](function(t){return n.apply(t,e)})}}),En(Z.prototype,function(e,n){var r=t[n];if(r){var i=r.name,o=da[i]||(da[i]=[]);o.push({name:n,func:r})}}),da[wr(null,A).name]=[{name:"wrapper",func:null}],Z.prototype.clone=tt,Z.prototype.reverse=rt,Z.prototype.value=Wt,t.prototype.chain=Ti,t.prototype.commit=Ei,t.prototype.plant=ki,t.prototype.reverse=Ai,t.prototype.toString=ji,t.prototype.run=t.prototype.toJSON=t.prototype.valueOf=t.prototype.value=Ni,t.prototype.collect=t.prototype.map,t.prototype.head=t.prototype.first,t.prototype.select=t.prototype.filter,t.prototype.tail=t.prototype.rest,t}var T,E="3.6.0",k=1,A=2,j=4,N=8,O=16,D=32,I=64,R=128,L=256,P=30,F="...",H=150,q=16,M=0,W=1,U=2,z="Expected a function",B="__lodash_placeholder__",V="[object Arguments]",$="[object Array]",K="[object Boolean]",X="[object Date]",G="[object Error]",Y="[object Function]",Z="[object Map]",Q="[object Number]",J="[object Object]",et="[object RegExp]",tt="[object Set]",nt="[object String]",rt="[object WeakMap]",it="[object ArrayBuffer]",ot="[object Float32Array]",st="[object Float64Array]",at="[object Int8Array]",lt="[object Int16Array]",ct="[object Int32Array]",ut="[object Uint8Array]",ht="[object Uint8ClampedArray]",ft="[object Uint16Array]",pt="[object Uint32Array]",dt=/\b__p \+= '';/g,gt=/\b(__p \+=) '' \+/g,vt=/(__e\(.*?\)|\b__t\)) \+\n'';/g,mt=/&(?:amp|lt|gt|quot|#39|#96);/g,yt=/[&<>"'`]/g,bt=RegExp(mt.source),wt=RegExp(yt.source),xt=/<%-([\s\S]+?)%>/g,Ct=/<%([\s\S]+?)%>/g,_t=/<%=([\s\S]+?)%>/g,St=/[\u0300-\u036f\ufe20-\ufe23]/g,Tt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Et=/\w*$/,kt=/^0[xX]/,At=/^\[object .+?Constructor\]$/,jt=/[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g,Nt=/($^)/,Ot=/[.*+?^${}()|[\]\/\\]/g,Dt=RegExp(Ot.source),It=/['\n\r\u2028\u2029\\]/g,Rt=function(){var e="[A-Z\\xc0-\\xd6\\xd8-\\xde]",t="[a-z\\xdf-\\xf6\\xf8-\\xff]+";return RegExp(e+"+(?="+e+t+")|"+e+"?"+t+"|"+e+"+|[0-9]+","g")}(),Lt=" 	\f ﻿\n\r\u2028\u2029 ᠎             　",Pt=["Array","ArrayBuffer","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Math","Number","Object","RegExp","Set","String","_","clearTimeout","document","isFinite","parseInt","setTimeout","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","window"],Ft=-1,Ht={};Ht[ot]=Ht[st]=Ht[at]=Ht[lt]=Ht[ct]=Ht[ut]=Ht[ht]=Ht[ft]=Ht[pt]=!0,Ht[V]=Ht[$]=Ht[it]=Ht[K]=Ht[X]=Ht[G]=Ht[Y]=Ht[Z]=Ht[Q]=Ht[J]=Ht[et]=Ht[tt]=Ht[nt]=Ht[rt]=!1;var qt={};qt[V]=qt[$]=qt[it]=qt[K]=qt[X]=qt[ot]=qt[st]=qt[at]=qt[lt]=qt[ct]=qt[Q]=qt[J]=qt[et]=qt[nt]=qt[ut]=qt[ht]=qt[ft]=qt[pt]=!0,qt[G]=qt[Y]=qt[Z]=qt[tt]=qt[rt]=!1;var Mt={leading:!1,maxWait:0,trailing:!1},Wt={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss"},Ut={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"},zt={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'","&#96;":"`"},Bt={"function":!0,object:!0},Vt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},$t=Bt[typeof n]&&n&&!n.nodeType&&n,Kt=Bt[typeof t]&&t&&!t.nodeType&&t,Xt=$t&&Kt&&"object"==typeof e&&e,Gt=Bt[typeof self]&&self&&self.Object&&self,Yt=Bt[typeof window]&&window&&window.Object&&window,Zt=Kt&&Kt.exports===$t&&$t,Qt=Xt||Yt!==(this&&this.window)&&Yt||Gt||this,Jt=S();"function"==typeof define&&"object"==typeof define.amd&&define.amd?(Qt._=Jt,define(function(){return Jt})):$t&&Kt?Zt?(Kt.exports=Jt)._=Jt:$t._=Jt:Qt._=Jt}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],9:[function(e,t){$=jQuery=e("jquery"),t.exports=e("./select2.js")},{"./select2.js":10,jquery:7}],10:[function(){!function(e){"undefined"==typeof e.fn.each2&&e.extend(e.fn,{each2:function(t){for(var n=e([0]),r=-1,i=this.length;++r<i&&(n.context=n[0]=this[r])&&t.call(n[0],r,n)!==!1;);return this}})}(jQuery),function(e,t){"use strict";function n(t){var n=e(document.createTextNode(""));t.before(n),n.before(t),n.remove()}function r(e){function t(e){return M[e]||e}return e.replace(/[^\u0000-\u007E]/g,t)}function i(e,t){for(var n=0,r=t.length;r>n;n+=1)if(s(e,t[n]))return n;return-1}function o(){var t=e(q);t.appendTo(document.body);var n={width:t.width()-t[0].clientWidth,height:t.height()-t[0].clientHeight};return t.remove(),n}function s(e,n){return e===n?!0:e===t||n===t?!1:null===e||null===n?!1:e.constructor===String?e+""==n+"":n.constructor===String?n+""==e+"":!1}function a(e,t,n){var r,i,o;if(null===e||e.length<1)return[];for(r=e.split(t),i=0,o=r.length;o>i;i+=1)r[i]=n(r[i]);return r}function l(e){return e.outerWidth(!1)-e.width()}function c(n){var r="keyup-change-value";n.on("keydown",function(){e.data(n,r)===t&&e.data(n,r,n.val())}),n.on("keyup",function(){var i=e.data(n,r);i!==t&&n.val()!==i&&(e.removeData(n,r),n.trigger("keyup-change"))})}function u(n){n.on("mousemove",function(n){var r=F;(r===t||r.x!==n.pageX||r.y!==n.pageY)&&e(n.target).trigger("mousemove-filtered",n)})}function h(e,n,r){r=r||t;var i;return function(){var t=arguments;window.clearTimeout(i),i=window.setTimeout(function(){n.apply(r,t)},e)}}function f(e,t){var n=h(e,function(e){t.trigger("scroll-debounced",e)});t.on("scroll",function(e){i(e.target,t.get())>=0&&n(e)})}function p(e){e[0]!==document.activeElement&&window.setTimeout(function(){var t,n=e[0],r=e.val().length;e.focus();var i=n.offsetWidth>0||n.offsetHeight>0;i&&n===document.activeElement&&(n.setSelectionRange?n.setSelectionRange(r,r):n.createTextRange&&(t=n.createTextRange(),t.collapse(!1),t.select()))},0)}function d(t){t=e(t)[0];var n=0,r=0;if("selectionStart"in t)n=t.selectionStart,r=t.selectionEnd-n;else if("selection"in document){t.focus();var i=document.selection.createRange();r=document.selection.createRange().text.length,i.moveStart("character",-t.value.length),n=i.text.length-r}return{offset:n,length:r}}function g(e){e.preventDefault(),e.stopPropagation()}function v(e){e.preventDefault(),e.stopImmediatePropagation()}function m(t){if(!R){var n=t[0].currentStyle||window.getComputedStyle(t[0],null);R=e(document.createElement("div")).css({position:"absolute",left:"-10000px",top:"-10000px",display:"none",fontSize:n.fontSize,fontFamily:n.fontFamily,fontStyle:n.fontStyle,fontWeight:n.fontWeight,letterSpacing:n.letterSpacing,textTransform:n.textTransform,whiteSpace:"nowrap"}),R.attr("class","select2-sizer"),e(document.body).append(R)}return R.text(t.val()),R.width()}function y(t,n,r){var i,o,s=[];i=e.trim(t.attr("class")),i&&(i=""+i,e(i.split(/\s+/)).each2(function(){0===this.indexOf("select2-")&&s.push(this)})),i=e.trim(n.attr("class")),i&&(i=""+i,e(i.split(/\s+/)).each2(function(){0!==this.indexOf("select2-")&&(o=r(this),o&&s.push(o))})),t.attr("class",s.join(" "))}function b(e,t,n,i){var o=r(e.toUpperCase()).indexOf(r(t.toUpperCase())),s=t.length;return 0>o?void n.push(i(e)):(n.push(i(e.substring(0,o))),n.push("<span class='select2-match'>"),n.push(i(e.substring(o,o+s))),n.push("</span>"),void n.push(i(e.substring(o+s,e.length))))}function w(e){var t={"\\":"&#92;","&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#47;"};return String(e).replace(/[&<>"'\/\\]/g,function(e){return t[e]})}function x(n){var r,i=null,o=n.quietMillis||100,s=n.url,a=this;return function(l){window.clearTimeout(r),r=window.setTimeout(function(){var r=n.data,o=s,c=n.transport||e.fn.select2.ajaxDefaults.transport,u={type:n.type||"GET",cache:n.cache||!1,jsonpCallback:n.jsonpCallback||t,dataType:n.dataType||"json"},h=e.extend({},e.fn.select2.ajaxDefaults.params,u);r=r?r.call(a,l.term,l.page,l.context):null,o="function"==typeof o?o.call(a,l.term,l.page,l.context):o,i&&"function"==typeof i.abort&&i.abort(),n.params&&(e.isFunction(n.params)?e.extend(h,n.params.call(a)):e.extend(h,n.params)),e.extend(h,{url:o,dataType:n.dataType,data:r,success:function(e){var t=n.results(e,l.page,l);l.callback(t)},error:function(e,t,n){var r={hasError:!0,jqXHR:e,textStatus:t,errorThrown:n};l.callback(r)}}),i=c.call(a,h)},o)}}function C(t){var n,r,i=t,o=function(e){return""+e.text};e.isArray(i)&&(r=i,i={results:r}),e.isFunction(i)===!1&&(r=i,i=function(){return r});var s=i();return s.text&&(o=s.text,e.isFunction(o)||(n=s.text,o=function(e){return e[n]})),function(t){var n,r=t.term,s={results:[]};return""===r?void t.callback(i()):(n=function(i,s){var a,l;if(i=i[0],i.children){a={};for(l in i)i.hasOwnProperty(l)&&(a[l]=i[l]);a.children=[],e(i.children).each2(function(e,t){n(t,a.children)}),(a.children.length||t.matcher(r,o(a),i))&&s.push(a)}else t.matcher(r,o(i),i)&&s.push(i)},e(i().results).each2(function(e,t){n(t,s.results)}),void t.callback(s))}}function _(n){var r=e.isFunction(n);return function(i){var o=i.term,s={results:[]},a=r?n(i):n;e.isArray(a)&&(e(a).each(function(){var e=this.text!==t,n=e?this.text:this;(""===o||i.matcher(o,n))&&s.results.push(e?this:{id:this,text:this})}),i.callback(s))}}function S(t,n){if(e.isFunction(t))return!0;if(!t)return!1;if("string"==typeof t)return!0;throw new Error(n+" must be a string, function, or falsy value")}function T(t,n){if(e.isFunction(t)){var r=Array.prototype.slice.call(arguments,2);return t.apply(n,r)}return t}function E(t){var n=0;return e.each(t,function(e,t){t.children?n+=E(t.children):n++}),n}function k(e,n,r,i){var o,a,l,c,u,h=e,f=!1;if(!i.createSearchChoice||!i.tokenSeparators||i.tokenSeparators.length<1)return t;for(;;){for(a=-1,l=0,c=i.tokenSeparators.length;c>l&&(u=i.tokenSeparators[l],a=e.indexOf(u),!(a>=0));l++);if(0>a)break;if(o=e.substring(0,a),e=e.substring(a+u.length),o.length>0&&(o=i.createSearchChoice.call(this,o,n),o!==t&&null!==o&&i.id(o)!==t&&null!==i.id(o))){for(f=!1,l=0,c=n.length;c>l;l++)if(s(i.id(o),i.id(n[l]))){f=!0;break}f||r(o)}}return h!==e?e:void 0}function A(){var t=this;e.each(arguments,function(e,n){t[n].remove(),t[n]=null})}function j(t,n){var r=function(){};return r.prototype=new t,r.prototype.constructor=r,r.prototype.parent=t.prototype,r.prototype=e.extend(r.prototype,n),r}if(window.Select2===t){var N,O,D,I,R,L,P,F={x:0,y:0},H={TAB:9,ENTER:13,ESC:27,SPACE:32,LEFT:37,UP:38,RIGHT:39,DOWN:40,SHIFT:16,CTRL:17,ALT:18,PAGE_UP:33,PAGE_DOWN:34,HOME:36,END:35,BACKSPACE:8,DELETE:46,isArrow:function(e){switch(e=e.which?e.which:e){case H.LEFT:case H.RIGHT:case H.UP:case H.DOWN:return!0}return!1},isControl:function(e){var t=e.which;switch(t){case H.SHIFT:case H.CTRL:case H.ALT:return!0}return e.metaKey?!0:!1},isFunctionKey:function(e){return e=e.which?e.which:e,e>=112&&123>=e}},q="<div class='select2-measure-scrollbar'></div>",M={"Ⓐ":"A","Ａ":"A","À":"A","Á":"A","Â":"A","Ầ":"A","Ấ":"A","Ẫ":"A","Ẩ":"A","Ã":"A","Ā":"A","Ă":"A","Ằ":"A","Ắ":"A","Ẵ":"A","Ẳ":"A","Ȧ":"A","Ǡ":"A","Ä":"A","Ǟ":"A","Ả":"A","Å":"A","Ǻ":"A","Ǎ":"A","Ȁ":"A","Ȃ":"A","Ạ":"A","Ậ":"A","Ặ":"A","Ḁ":"A","Ą":"A","Ⱥ":"A","Ɐ":"A","Ꜳ":"AA","Æ":"AE","Ǽ":"AE","Ǣ":"AE","Ꜵ":"AO","Ꜷ":"AU","Ꜹ":"AV","Ꜻ":"AV","Ꜽ":"AY","Ⓑ":"B","Ｂ":"B","Ḃ":"B","Ḅ":"B","Ḇ":"B","Ƀ":"B","Ƃ":"B","Ɓ":"B","Ⓒ":"C","Ｃ":"C","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","Ç":"C","Ḉ":"C","Ƈ":"C","Ȼ":"C","Ꜿ":"C","Ⓓ":"D","Ｄ":"D","Ḋ":"D","Ď":"D","Ḍ":"D","Ḑ":"D","Ḓ":"D","Ḏ":"D","Đ":"D","Ƌ":"D","Ɗ":"D","Ɖ":"D","Ꝺ":"D","Ǳ":"DZ","Ǆ":"DZ","ǲ":"Dz","ǅ":"Dz","Ⓔ":"E","Ｅ":"E","È":"E","É":"E","Ê":"E","Ề":"E","Ế":"E","Ễ":"E","Ể":"E","Ẽ":"E","Ē":"E","Ḕ":"E","Ḗ":"E","Ĕ":"E","Ė":"E","Ë":"E","Ẻ":"E","Ě":"E","Ȅ":"E","Ȇ":"E","Ẹ":"E","Ệ":"E","Ȩ":"E","Ḝ":"E","Ę":"E","Ḙ":"E","Ḛ":"E","Ɛ":"E","Ǝ":"E","Ⓕ":"F","Ｆ":"F","Ḟ":"F","Ƒ":"F","Ꝼ":"F","Ⓖ":"G","Ｇ":"G","Ǵ":"G","Ĝ":"G","Ḡ":"G","Ğ":"G","Ġ":"G","Ǧ":"G","Ģ":"G","Ǥ":"G","Ɠ":"G","Ꞡ":"G","Ᵹ":"G","Ꝿ":"G","Ⓗ":"H","Ｈ":"H","Ĥ":"H","Ḣ":"H","Ḧ":"H","Ȟ":"H","Ḥ":"H","Ḩ":"H","Ḫ":"H","Ħ":"H","Ⱨ":"H","Ⱶ":"H","Ɥ":"H","Ⓘ":"I","Ｉ":"I","Ì":"I","Í":"I","Î":"I","Ĩ":"I","Ī":"I","Ĭ":"I","İ":"I","Ï":"I","Ḯ":"I","Ỉ":"I","Ǐ":"I","Ȉ":"I","Ȋ":"I","Ị":"I","Į":"I","Ḭ":"I","Ɨ":"I","Ⓙ":"J","Ｊ":"J","Ĵ":"J","Ɉ":"J","Ⓚ":"K","Ｋ":"K","Ḱ":"K","Ǩ":"K","Ḳ":"K","Ķ":"K","Ḵ":"K","Ƙ":"K","Ⱪ":"K","Ꝁ":"K","Ꝃ":"K","Ꝅ":"K","Ꞣ":"K","Ⓛ":"L","Ｌ":"L","Ŀ":"L","Ĺ":"L","Ľ":"L","Ḷ":"L","Ḹ":"L","Ļ":"L","Ḽ":"L","Ḻ":"L","Ł":"L","Ƚ":"L","Ɫ":"L","Ⱡ":"L","Ꝉ":"L","Ꝇ":"L","Ꞁ":"L","Ǉ":"LJ","ǈ":"Lj","Ⓜ":"M","Ｍ":"M","Ḿ":"M","Ṁ":"M","Ṃ":"M","Ɱ":"M","Ɯ":"M","Ⓝ":"N","Ｎ":"N","Ǹ":"N","Ń":"N","Ñ":"N","Ṅ":"N","Ň":"N","Ṇ":"N","Ņ":"N","Ṋ":"N","Ṉ":"N","Ƞ":"N","Ɲ":"N","Ꞑ":"N","Ꞥ":"N","Ǌ":"NJ","ǋ":"Nj","Ⓞ":"O","Ｏ":"O","Ò":"O","Ó":"O","Ô":"O","Ồ":"O","Ố":"O","Ỗ":"O","Ổ":"O","Õ":"O","Ṍ":"O","Ȭ":"O","Ṏ":"O","Ō":"O","Ṑ":"O","Ṓ":"O","Ŏ":"O","Ȯ":"O","Ȱ":"O","Ö":"O","Ȫ":"O","Ỏ":"O","Ő":"O","Ǒ":"O","Ȍ":"O","Ȏ":"O","Ơ":"O","Ờ":"O","Ớ":"O","Ỡ":"O","Ở":"O","Ợ":"O","Ọ":"O","Ộ":"O","Ǫ":"O","Ǭ":"O","Ø":"O","Ǿ":"O","Ɔ":"O","Ɵ":"O","Ꝋ":"O","Ꝍ":"O","Ƣ":"OI","Ꝏ":"OO","Ȣ":"OU","Ⓟ":"P","Ｐ":"P","Ṕ":"P","Ṗ":"P","Ƥ":"P","Ᵽ":"P","Ꝑ":"P","Ꝓ":"P","Ꝕ":"P","Ⓠ":"Q","Ｑ":"Q","Ꝗ":"Q","Ꝙ":"Q","Ɋ":"Q","Ⓡ":"R","Ｒ":"R","Ŕ":"R","Ṙ":"R","Ř":"R","Ȑ":"R","Ȓ":"R","Ṛ":"R","Ṝ":"R","Ŗ":"R","Ṟ":"R","Ɍ":"R","Ɽ":"R","Ꝛ":"R","Ꞧ":"R","Ꞃ":"R","Ⓢ":"S","Ｓ":"S","ẞ":"S","Ś":"S","Ṥ":"S","Ŝ":"S","Ṡ":"S","Š":"S","Ṧ":"S","Ṣ":"S","Ṩ":"S","Ș":"S","Ş":"S","Ȿ":"S","Ꞩ":"S","Ꞅ":"S","Ⓣ":"T","Ｔ":"T","Ṫ":"T","Ť":"T","Ṭ":"T","Ț":"T","Ţ":"T","Ṱ":"T","Ṯ":"T","Ŧ":"T","Ƭ":"T","Ʈ":"T","Ⱦ":"T","Ꞇ":"T","Ꜩ":"TZ","Ⓤ":"U","Ｕ":"U","Ù":"U","Ú":"U","Û":"U","Ũ":"U","Ṹ":"U","Ū":"U","Ṻ":"U","Ŭ":"U","Ü":"U","Ǜ":"U","Ǘ":"U","Ǖ":"U","Ǚ":"U","Ủ":"U","Ů":"U","Ű":"U","Ǔ":"U","Ȕ":"U","Ȗ":"U","Ư":"U","Ừ":"U","Ứ":"U","Ữ":"U","Ử":"U","Ự":"U","Ụ":"U","Ṳ":"U","Ų":"U","Ṷ":"U","Ṵ":"U","Ʉ":"U","Ⓥ":"V","Ｖ":"V","Ṽ":"V","Ṿ":"V","Ʋ":"V","Ꝟ":"V","Ʌ":"V","Ꝡ":"VY","Ⓦ":"W","Ｗ":"W","Ẁ":"W","Ẃ":"W","Ŵ":"W","Ẇ":"W","Ẅ":"W","Ẉ":"W","Ⱳ":"W","Ⓧ":"X","Ｘ":"X","Ẋ":"X","Ẍ":"X","Ⓨ":"Y","Ｙ":"Y","Ỳ":"Y","Ý":"Y","Ŷ":"Y","Ỹ":"Y","Ȳ":"Y","Ẏ":"Y","Ÿ":"Y","Ỷ":"Y","Ỵ":"Y","Ƴ":"Y","Ɏ":"Y","Ỿ":"Y","Ⓩ":"Z","Ｚ":"Z","Ź":"Z","Ẑ":"Z","Ż":"Z","Ž":"Z","Ẓ":"Z","Ẕ":"Z","Ƶ":"Z","Ȥ":"Z","Ɀ":"Z","Ⱬ":"Z","Ꝣ":"Z","ⓐ":"a","ａ":"a","ẚ":"a","à":"a","á":"a","â":"a","ầ":"a","ấ":"a","ẫ":"a","ẩ":"a","ã":"a","ā":"a","ă":"a","ằ":"a","ắ":"a","ẵ":"a","ẳ":"a","ȧ":"a","ǡ":"a","ä":"a","ǟ":"a","ả":"a","å":"a","ǻ":"a","ǎ":"a","ȁ":"a","ȃ":"a","ạ":"a","ậ":"a","ặ":"a","ḁ":"a","ą":"a","ⱥ":"a","ɐ":"a","ꜳ":"aa","æ":"ae","ǽ":"ae","ǣ":"ae","ꜵ":"ao","ꜷ":"au","ꜹ":"av","ꜻ":"av","ꜽ":"ay","ⓑ":"b","ｂ":"b","ḃ":"b","ḅ":"b","ḇ":"b","ƀ":"b","ƃ":"b","ɓ":"b","ⓒ":"c","ｃ":"c","ć":"c","ĉ":"c","ċ":"c","č":"c","ç":"c","ḉ":"c","ƈ":"c","ȼ":"c","ꜿ":"c","ↄ":"c","ⓓ":"d","ｄ":"d","ḋ":"d","ď":"d","ḍ":"d","ḑ":"d","ḓ":"d","ḏ":"d","đ":"d","ƌ":"d","ɖ":"d","ɗ":"d","ꝺ":"d","ǳ":"dz","ǆ":"dz","ⓔ":"e","ｅ":"e","è":"e","é":"e","ê":"e","ề":"e","ế":"e","ễ":"e","ể":"e","ẽ":"e","ē":"e","ḕ":"e","ḗ":"e","ĕ":"e","ė":"e","ë":"e","ẻ":"e","ě":"e","ȅ":"e","ȇ":"e","ẹ":"e","ệ":"e","ȩ":"e","ḝ":"e","ę":"e","ḙ":"e","ḛ":"e","ɇ":"e","ɛ":"e","ǝ":"e","ⓕ":"f","ｆ":"f","ḟ":"f","ƒ":"f","ꝼ":"f","ⓖ":"g","ｇ":"g","ǵ":"g","ĝ":"g","ḡ":"g","ğ":"g","ġ":"g","ǧ":"g","ģ":"g","ǥ":"g","ɠ":"g","ꞡ":"g","ᵹ":"g","ꝿ":"g","ⓗ":"h","ｈ":"h","ĥ":"h","ḣ":"h","ḧ":"h","ȟ":"h","ḥ":"h","ḩ":"h","ḫ":"h","ẖ":"h","ħ":"h","ⱨ":"h","ⱶ":"h","ɥ":"h","ƕ":"hv","ⓘ":"i","ｉ":"i","ì":"i","í":"i","î":"i","ĩ":"i","ī":"i","ĭ":"i","ï":"i","ḯ":"i","ỉ":"i","ǐ":"i","ȉ":"i","ȋ":"i","ị":"i","į":"i","ḭ":"i","ɨ":"i","ı":"i","ⓙ":"j","ｊ":"j","ĵ":"j","ǰ":"j","ɉ":"j","ⓚ":"k","ｋ":"k","ḱ":"k","ǩ":"k","ḳ":"k","ķ":"k","ḵ":"k","ƙ":"k","ⱪ":"k","ꝁ":"k","ꝃ":"k","ꝅ":"k","ꞣ":"k","ⓛ":"l","ｌ":"l","ŀ":"l","ĺ":"l","ľ":"l","ḷ":"l","ḹ":"l","ļ":"l","ḽ":"l","ḻ":"l","ſ":"l","ł":"l","ƚ":"l","ɫ":"l","ⱡ":"l","ꝉ":"l","ꞁ":"l","ꝇ":"l","ǉ":"lj","ⓜ":"m","ｍ":"m","ḿ":"m","ṁ":"m","ṃ":"m","ɱ":"m","ɯ":"m","ⓝ":"n","ｎ":"n","ǹ":"n","ń":"n","ñ":"n","ṅ":"n","ň":"n","ṇ":"n","ņ":"n","ṋ":"n","ṉ":"n","ƞ":"n","ɲ":"n","ŉ":"n","ꞑ":"n","ꞥ":"n","ǌ":"nj","ⓞ":"o","ｏ":"o","ò":"o","ó":"o","ô":"o","ồ":"o","ố":"o","ỗ":"o","ổ":"o","õ":"o","ṍ":"o","ȭ":"o","ṏ":"o","ō":"o","ṑ":"o","ṓ":"o","ŏ":"o","ȯ":"o","ȱ":"o","ö":"o","ȫ":"o","ỏ":"o","ő":"o","ǒ":"o","ȍ":"o","ȏ":"o","ơ":"o","ờ":"o","ớ":"o","ỡ":"o","ở":"o","ợ":"o","ọ":"o","ộ":"o","ǫ":"o","ǭ":"o","ø":"o","ǿ":"o","ɔ":"o","ꝋ":"o","ꝍ":"o","ɵ":"o","ƣ":"oi","ȣ":"ou","ꝏ":"oo","ⓟ":"p","ｐ":"p","ṕ":"p","ṗ":"p","ƥ":"p","ᵽ":"p","ꝑ":"p","ꝓ":"p","ꝕ":"p","ⓠ":"q","ｑ":"q","ɋ":"q","ꝗ":"q","ꝙ":"q","ⓡ":"r","ｒ":"r","ŕ":"r","ṙ":"r","ř":"r","ȑ":"r","ȓ":"r","ṛ":"r","ṝ":"r","ŗ":"r","ṟ":"r","ɍ":"r","ɽ":"r","ꝛ":"r","ꞧ":"r","ꞃ":"r","ⓢ":"s","ｓ":"s","ß":"s","ś":"s","ṥ":"s","ŝ":"s","ṡ":"s","š":"s","ṧ":"s","ṣ":"s","ṩ":"s","ș":"s","ş":"s","ȿ":"s","ꞩ":"s","ꞅ":"s","ẛ":"s","ⓣ":"t","ｔ":"t","ṫ":"t","ẗ":"t","ť":"t","ṭ":"t","ț":"t","ţ":"t","ṱ":"t","ṯ":"t","ŧ":"t","ƭ":"t","ʈ":"t","ⱦ":"t","ꞇ":"t","ꜩ":"tz","ⓤ":"u","ｕ":"u","ù":"u","ú":"u","û":"u","ũ":"u","ṹ":"u","ū":"u","ṻ":"u","ŭ":"u","ü":"u","ǜ":"u","ǘ":"u","ǖ":"u","ǚ":"u","ủ":"u","ů":"u","ű":"u","ǔ":"u","ȕ":"u","ȗ":"u","ư":"u","ừ":"u","ứ":"u","ữ":"u","ử":"u","ự":"u","ụ":"u","ṳ":"u","ų":"u","ṷ":"u","ṵ":"u","ʉ":"u","ⓥ":"v","ｖ":"v","ṽ":"v","ṿ":"v","ʋ":"v","ꝟ":"v","ʌ":"v","ꝡ":"vy","ⓦ":"w","ｗ":"w","ẁ":"w","ẃ":"w","ŵ":"w","ẇ":"w","ẅ":"w","ẘ":"w","ẉ":"w","ⱳ":"w","ⓧ":"x","ｘ":"x","ẋ":"x","ẍ":"x","ⓨ":"y","ｙ":"y","ỳ":"y","ý":"y","ŷ":"y","ỹ":"y","ȳ":"y","ẏ":"y","ÿ":"y","ỷ":"y","ẙ":"y","ỵ":"y","ƴ":"y","ɏ":"y","ỿ":"y","ⓩ":"z","ｚ":"z","ź":"z","ẑ":"z","ż":"z","ž":"z","ẓ":"z","ẕ":"z","ƶ":"z","ȥ":"z","ɀ":"z","ⱬ":"z","ꝣ":"z","Ά":"Α","Έ":"Ε","Ή":"Η","Ί":"Ι","Ϊ":"Ι","Ό":"Ο","Ύ":"Υ","Ϋ":"Υ","Ώ":"Ω","ά":"α","έ":"ε","ή":"η","ί":"ι","ϊ":"ι","ΐ":"ι","ό":"ο","ύ":"υ","ϋ":"υ","ΰ":"υ","ω":"ω","ς":"σ"};L=e(document),I=function(){var e=1;return function(){return e++}}(),N=j(Object,{bind:function(e){var t=this;return function(){e.apply(t,arguments)}},init:function(n){var r,i,s=".select2-results";this.opts=n=this.prepareOpts(n),this.id=n.id,n.element.data("select2")!==t&&null!==n.element.data("select2")&&n.element.data("select2").destroy(),this.container=this.createContainer(),this.liveRegion=e(".select2-hidden-accessible"),0==this.liveRegion.length&&(this.liveRegion=e("<span>",{role:"status","aria-live":"polite"}).addClass("select2-hidden-accessible").appendTo(document.body)),this.containerId="s2id_"+(n.element.attr("id")||"autogen"+I()),this.containerEventName=this.containerId.replace(/([.])/g,"_").replace(/([;&,\-\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g,"\\$1"),this.container.attr("id",this.containerId),this.container.attr("title",n.element.attr("title")),this.body=e(document.body),y(this.container,this.opts.element,this.opts.adaptContainerCssClass),this.container.attr("style",n.element.attr("style")),this.container.css(T(n.containerCss,this.opts.element)),this.container.addClass(T(n.containerCssClass,this.opts.element)),this.elementTabIndex=this.opts.element.attr("tabindex"),this.opts.element.data("select2",this).attr("tabindex","-1").before(this.container).on("click.select2",g),this.container.data("select2",this),this.dropdown=this.container.find(".select2-drop"),y(this.dropdown,this.opts.element,this.opts.adaptDropdownCssClass),this.dropdown.addClass(T(n.dropdownCssClass,this.opts.element)),this.dropdown.data("select2",this),this.dropdown.on("click",g),this.results=r=this.container.find(s),this.search=i=this.container.find("input.select2-input"),this.queryCount=0,this.resultsPage=0,this.context=null,this.initContainer(),this.container.on("click",g),u(this.results),this.dropdown.on("mousemove-filtered",s,this.bind(this.highlightUnderEvent)),this.dropdown.on("touchstart touchmove touchend",s,this.bind(function(e){this._touchEvent=!0,this.highlightUnderEvent(e)})),this.dropdown.on("touchmove",s,this.bind(this.touchMoved)),this.dropdown.on("touchstart touchend",s,this.bind(this.clearTouchMoved)),this.dropdown.on("click",this.bind(function(){this._touchEvent&&(this._touchEvent=!1,this.selectHighlighted())})),f(80,this.results),this.dropdown.on("scroll-debounced",s,this.bind(this.loadMoreIfNeeded)),e(this.container).on("change",".select2-input",function(e){e.stopPropagation()}),e(this.dropdown).on("change",".select2-input",function(e){e.stopPropagation()}),e.fn.mousewheel&&r.mousewheel(function(e,t,n,i){var o=r.scrollTop();i>0&&0>=o-i?(r.scrollTop(0),g(e)):0>i&&r.get(0).scrollHeight-r.scrollTop()+i<=r.height()&&(r.scrollTop(r.get(0).scrollHeight-r.height()),g(e))}),c(i),i.on("keyup-change input paste",this.bind(this.updateResults)),i.on("focus",function(){i.addClass("select2-focused")}),i.on("blur",function(){i.removeClass("select2-focused")}),this.dropdown.on("mouseup",s,this.bind(function(t){e(t.target).closest(".select2-result-selectable").length>0&&(this.highlightUnderEvent(t),this.selectHighlighted(t))})),this.dropdown.on("click mouseup mousedown touchstart touchend focusin",function(e){e.stopPropagation()}),this.nextSearchTerm=t,e.isFunction(this.opts.initSelection)&&(this.initSelection(),this.monitorSource()),null!==n.maximumInputLength&&this.search.attr("maxlength",n.maximumInputLength);var a=n.element.prop("disabled");a===t&&(a=!1),this.enable(!a);var l=n.element.prop("readonly");l===t&&(l=!1),this.readonly(l),P=P||o(),this.autofocus=n.element.prop("autofocus"),n.element.prop("autofocus",!1),this.autofocus&&this.focus(),this.search.attr("placeholder",n.searchInputPlaceholder)},destroy:function(){var e=this.opts.element,n=e.data("select2"),r=this;this.close(),e.length&&e[0].detachEvent&&r._sync&&e.each(function(){r._sync&&this.detachEvent("onpropertychange",r._sync)}),this.propertyObserver&&(this.propertyObserver.disconnect(),this.propertyObserver=null),this._sync=null,n!==t&&(n.container.remove(),n.liveRegion.remove(),n.dropdown.remove(),e.show().removeData("select2").off(".select2").prop("autofocus",this.autofocus||!1),this.elementTabIndex?e.attr({tabindex:this.elementTabIndex}):e.removeAttr("tabindex"),e.show()),A.call(this,"container","liveRegion","dropdown","results","search")
},optionToData:function(e){return e.is("option")?{id:e.prop("value"),text:e.text(),element:e.get(),css:e.attr("class"),disabled:e.prop("disabled"),locked:s(e.attr("locked"),"locked")||s(e.data("locked"),!0)}:e.is("optgroup")?{text:e.attr("label"),children:[],element:e.get(),css:e.attr("class")}:void 0},prepareOpts:function(n){var r,i,o,l,c=this;if(r=n.element,"select"===r.get(0).tagName.toLowerCase()&&(this.select=i=n.element),i&&e.each(["id","multiple","ajax","query","createSearchChoice","initSelection","data","tags"],function(){if(this in n)throw new Error("Option '"+this+"' is not allowed for Select2 when attached to a <select> element.")}),n=e.extend({},{populateResults:function(r,i,o){var s,a=this.opts.id,l=this.liveRegion;(s=function(r,i,u){var h,f,p,d,g,v,m,y,b,w;r=n.sortResults(r,i,o);var x=[];for(h=0,f=r.length;f>h;h+=1)p=r[h],g=p.disabled===!0,d=!g&&a(p)!==t,v=p.children&&p.children.length>0,m=e("<li></li>"),m.addClass("select2-results-dept-"+u),m.addClass("select2-result"),m.addClass(d?"select2-result-selectable":"select2-result-unselectable"),g&&m.addClass("select2-disabled"),v&&m.addClass("select2-result-with-children"),m.addClass(c.opts.formatResultCssClass(p)),m.attr("role","presentation"),y=e(document.createElement("div")),y.addClass("select2-result-label"),y.attr("id","select2-result-label-"+I()),y.attr("role","option"),w=n.formatResult(p,y,o,c.opts.escapeMarkup),w!==t&&(y.html(w),m.append(y)),v&&(b=e("<ul></ul>"),b.addClass("select2-result-sub"),s(p.children,b,u+1),m.append(b)),m.data("select2-data",p),x.push(m[0]);i.append(x),l.text(n.formatMatches(r.length))})(i,r,0)}},e.fn.select2.defaults,n),"function"!=typeof n.id&&(o=n.id,n.id=function(e){return e[o]}),e.isArray(n.element.data("select2Tags"))){if("tags"in n)throw"tags specified as both an attribute 'data-select2-tags' and in options of Select2 "+n.element.attr("id");n.tags=n.element.data("select2Tags")}if(i?(n.query=this.bind(function(e){var n,i,o,s={results:[],more:!1},a=e.term;o=function(t,n){var r;t.is("option")?e.matcher(a,t.text(),t)&&n.push(c.optionToData(t)):t.is("optgroup")&&(r=c.optionToData(t),t.children().each2(function(e,t){o(t,r.children)}),r.children.length>0&&n.push(r))},n=r.children(),this.getPlaceholder()!==t&&n.length>0&&(i=this.getPlaceholderOption(),i&&(n=n.not(i))),n.each2(function(e,t){o(t,s.results)}),e.callback(s)}),n.id=function(e){return e.id}):"query"in n||("ajax"in n?(l=n.element.data("ajax-url"),l&&l.length>0&&(n.ajax.url=l),n.query=x.call(n.element,n.ajax)):"data"in n?n.query=C(n.data):"tags"in n&&(n.query=_(n.tags),n.createSearchChoice===t&&(n.createSearchChoice=function(t){return{id:e.trim(t),text:e.trim(t)}}),n.initSelection===t&&(n.initSelection=function(t,r){var i=[];e(a(t.val(),n.separator,n.transformVal)).each(function(){var t={id:this,text:this},r=n.tags;e.isFunction(r)&&(r=r()),e(r).each(function(){return s(this.id,t.id)?(t=this,!1):void 0}),i.push(t)}),r(i)}))),"function"!=typeof n.query)throw"query function not defined for Select2 "+n.element.attr("id");if("top"===n.createSearchChoicePosition)n.createSearchChoicePosition=function(e,t){e.unshift(t)};else if("bottom"===n.createSearchChoicePosition)n.createSearchChoicePosition=function(e,t){e.push(t)};else if("function"!=typeof n.createSearchChoicePosition)throw"invalid createSearchChoicePosition option must be 'top', 'bottom' or a custom function";return n},monitorSource:function(){var n,r=this.opts.element,i=this;r.on("change.select2",this.bind(function(){this.opts.element.data("select2-change-triggered")!==!0&&this.initSelection()})),this._sync=this.bind(function(){var e=r.prop("disabled");e===t&&(e=!1),this.enable(!e);var n=r.prop("readonly");n===t&&(n=!1),this.readonly(n),this.container&&(y(this.container,this.opts.element,this.opts.adaptContainerCssClass),this.container.addClass(T(this.opts.containerCssClass,this.opts.element))),this.dropdown&&(y(this.dropdown,this.opts.element,this.opts.adaptDropdownCssClass),this.dropdown.addClass(T(this.opts.dropdownCssClass,this.opts.element)))}),r.length&&r[0].attachEvent&&r.each(function(){this.attachEvent("onpropertychange",i._sync)}),n=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver,n!==t&&(this.propertyObserver&&(delete this.propertyObserver,this.propertyObserver=null),this.propertyObserver=new n(function(t){e.each(t,i._sync)}),this.propertyObserver.observe(r.get(0),{attributes:!0,subtree:!1}))},triggerSelect:function(t){var n=e.Event("select2-selecting",{val:this.id(t),object:t,choice:t});return this.opts.element.trigger(n),!n.isDefaultPrevented()},triggerChange:function(t){t=t||{},t=e.extend({},t,{type:"change",val:this.val()}),this.opts.element.data("select2-change-triggered",!0),this.opts.element.trigger(t),this.opts.element.data("select2-change-triggered",!1),this.opts.element.click(),this.opts.blurOnChange&&this.opts.element.blur()},isInterfaceEnabled:function(){return this.enabledInterface===!0},enableInterface:function(){var e=this._enabled&&!this._readonly,t=!e;return e===this.enabledInterface?!1:(this.container.toggleClass("select2-container-disabled",t),this.close(),this.enabledInterface=e,!0)},enable:function(e){e===t&&(e=!0),this._enabled!==e&&(this._enabled=e,this.opts.element.prop("disabled",!e),this.enableInterface())},disable:function(){this.enable(!1)},readonly:function(e){e===t&&(e=!1),this._readonly!==e&&(this._readonly=e,this.opts.element.prop("readonly",e),this.enableInterface())},opened:function(){return this.container?this.container.hasClass("select2-dropdown-open"):!1},positionDropdown:function(){var t,n,r,i,o,s=this.dropdown,a=this.container,l=a.offset(),c=a.outerHeight(!1),u=a.outerWidth(!1),h=s.outerHeight(!1),f=e(window),p=f.width(),d=f.height(),g=f.scrollLeft()+p,v=f.scrollTop()+d,m=l.top+c,y=l.left,b=v>=m+h,w=l.top-h>=f.scrollTop(),x=s.outerWidth(!1),C=function(){return g>=y+x},_=function(){return l.left+g+a.outerWidth(!1)>x},S=s.hasClass("select2-drop-above");S?(n=!0,!w&&b&&(r=!0,n=!1)):(n=!1,!b&&w&&(r=!0,n=!0)),r&&(s.hide(),l=this.container.offset(),c=this.container.outerHeight(!1),u=this.container.outerWidth(!1),h=s.outerHeight(!1),g=f.scrollLeft()+p,v=f.scrollTop()+d,m=l.top+c,y=l.left,x=s.outerWidth(!1),s.show(),this.focusSearch()),this.opts.dropdownAutoWidth?(o=e(".select2-results",s)[0],s.addClass("select2-drop-auto-width"),s.css("width",""),x=s.outerWidth(!1)+(o.scrollHeight===o.clientHeight?0:P.width),x>u?u=x:x=u,h=s.outerHeight(!1)):this.container.removeClass("select2-drop-auto-width"),"static"!==this.body.css("position")&&(t=this.body.offset(),m-=t.top,y-=t.left),!C()&&_()&&(y=l.left+this.container.outerWidth(!1)-x),i={left:y,width:u},n?(i.top=l.top-h,i.bottom="auto",this.container.addClass("select2-drop-above"),s.addClass("select2-drop-above")):(i.top=m,i.bottom="auto",this.container.removeClass("select2-drop-above"),s.removeClass("select2-drop-above")),i=e.extend(i,T(this.opts.dropdownCss,this.opts.element)),s.css(i)},shouldOpen:function(){var t;return this.opened()?!1:this._enabled===!1||this._readonly===!0?!1:(t=e.Event("select2-opening"),this.opts.element.trigger(t),!t.isDefaultPrevented())},clearDropdownAlignmentPreference:function(){this.container.removeClass("select2-drop-above"),this.dropdown.removeClass("select2-drop-above")},open:function(){return this.shouldOpen()?(this.opening(),L.on("mousemove.select2Event",function(e){F.x=e.pageX,F.y=e.pageY}),!0):!1},opening:function(){var t,r=this.containerEventName,i="scroll."+r,o="resize."+r,s="orientationchange."+r;this.container.addClass("select2-dropdown-open").addClass("select2-container-active"),this.clearDropdownAlignmentPreference(),this.dropdown[0]!==this.body.children().last()[0]&&this.dropdown.detach().appendTo(this.body),t=e("#select2-drop-mask"),0===t.length&&(t=e(document.createElement("div")),t.attr("id","select2-drop-mask").attr("class","select2-drop-mask"),t.hide(),t.appendTo(this.body),t.on("mousedown touchstart click",function(r){n(t);var i,o=e("#select2-drop");o.length>0&&(i=o.data("select2"),i.opts.selectOnBlur&&i.selectHighlighted({noFocus:!0}),i.close(),r.preventDefault(),r.stopPropagation())})),this.dropdown.prev()[0]!==t[0]&&this.dropdown.before(t),e("#select2-drop").removeAttr("id"),this.dropdown.attr("id","select2-drop"),t.show(),this.positionDropdown(),this.dropdown.show(),this.positionDropdown(),this.dropdown.addClass("select2-drop-active");var a=this;this.container.parents().add(window).each(function(){e(this).on(o+" "+i+" "+s,function(){a.opened()&&a.positionDropdown()})})},close:function(){if(this.opened()){var t=this.containerEventName,n="scroll."+t,r="resize."+t,i="orientationchange."+t;this.container.parents().add(window).each(function(){e(this).off(n).off(r).off(i)}),this.clearDropdownAlignmentPreference(),e("#select2-drop-mask").hide(),this.dropdown.removeAttr("id"),this.dropdown.hide(),this.container.removeClass("select2-dropdown-open").removeClass("select2-container-active"),this.results.empty(),L.off("mousemove.select2Event"),this.clearSearch(),this.search.removeClass("select2-active"),this.opts.element.trigger(e.Event("select2-close"))}},externalSearch:function(e){this.open(),this.search.val(e),this.updateResults(!1)},clearSearch:function(){},getMaximumSelectionSize:function(){return T(this.opts.maximumSelectionSize,this.opts.element)},ensureHighlightVisible:function(){var t,n,r,i,o,s,a,l,c=this.results;if(n=this.highlight(),!(0>n)){if(0==n)return void c.scrollTop(0);t=this.findHighlightableChoices().find(".select2-result-label"),r=e(t[n]),l=(r.offset()||{}).top||0,i=l+r.outerHeight(!0),n===t.length-1&&(a=c.find("li.select2-more-results"),a.length>0&&(i=a.offset().top+a.outerHeight(!0))),o=c.offset().top+c.outerHeight(!1),i>o&&c.scrollTop(c.scrollTop()+(i-o)),s=l-c.offset().top,0>s&&"none"!=r.css("display")&&c.scrollTop(c.scrollTop()+s)}},findHighlightableChoices:function(){return this.results.find(".select2-result-selectable:not(.select2-disabled):not(.select2-selected)")},moveHighlight:function(t){for(var n=this.findHighlightableChoices(),r=this.highlight();r>-1&&r<n.length;){r+=t;var i=e(n[r]);if(i.hasClass("select2-result-selectable")&&!i.hasClass("select2-disabled")&&!i.hasClass("select2-selected")){this.highlight(r);break}}},highlight:function(t){var n,r,o=this.findHighlightableChoices();return 0===arguments.length?i(o.filter(".select2-highlighted")[0],o.get()):(t>=o.length&&(t=o.length-1),0>t&&(t=0),this.removeHighlight(),n=e(o[t]),n.addClass("select2-highlighted"),this.search.attr("aria-activedescendant",n.find(".select2-result-label").attr("id")),this.ensureHighlightVisible(),this.liveRegion.text(n.text()),r=n.data("select2-data"),void(r&&this.opts.element.trigger({type:"select2-highlight",val:this.id(r),choice:r})))},removeHighlight:function(){this.results.find(".select2-highlighted").removeClass("select2-highlighted")},touchMoved:function(){this._touchMoved=!0},clearTouchMoved:function(){this._touchMoved=!1},countSelectableResults:function(){return this.findHighlightableChoices().length},highlightUnderEvent:function(t){var n=e(t.target).closest(".select2-result-selectable");if(n.length>0&&!n.is(".select2-highlighted")){var r=this.findHighlightableChoices();this.highlight(r.index(n))}else 0==n.length&&this.removeHighlight()},loadMoreIfNeeded:function(){var e,t=this.results,n=t.find("li.select2-more-results"),r=this.resultsPage+1,i=this,o=this.search.val(),s=this.context;0!==n.length&&(e=n.offset().top-t.offset().top-t.height(),e<=this.opts.loadMorePadding&&(n.addClass("select2-active"),this.opts.query({element:this.opts.element,term:o,page:r,context:s,matcher:this.opts.matcher,callback:this.bind(function(e){i.opened()&&(i.opts.populateResults.call(this,t,e.results,{term:o,page:r,context:s}),i.postprocessResults(e,!1,!1),e.more===!0?(n.detach().appendTo(t).html(i.opts.escapeMarkup(T(i.opts.formatLoadMore,i.opts.element,r+1))),window.setTimeout(function(){i.loadMoreIfNeeded()},10)):n.remove(),i.positionDropdown(),i.resultsPage=r,i.context=e.context,this.opts.element.trigger({type:"select2-loaded",items:e}))})})))},tokenize:function(){},updateResults:function(n){function r(){c.removeClass("select2-active"),f.positionDropdown(),f.liveRegion.text(u.find(".select2-no-results,.select2-selection-limit,.select2-searching").length?u.text():f.opts.formatMatches(u.find('.select2-result-selectable:not(".select2-selected")').length))}function i(e){u.html(e),r()}var o,a,l,c=this.search,u=this.results,h=this.opts,f=this,p=c.val(),d=e.data(this.container,"select2-last-term");if((n===!0||!d||!s(p,d))&&(e.data(this.container,"select2-last-term",p),n===!0||this.showSearchInput!==!1&&this.opened())){l=++this.queryCount;var g=this.getMaximumSelectionSize();if(g>=1&&(o=this.data(),e.isArray(o)&&o.length>=g&&S(h.formatSelectionTooBig,"formatSelectionTooBig")))return void i("<li class='select2-selection-limit'>"+T(h.formatSelectionTooBig,h.element,g)+"</li>");if(c.val().length<h.minimumInputLength)return i(S(h.formatInputTooShort,"formatInputTooShort")?"<li class='select2-no-results'>"+T(h.formatInputTooShort,h.element,c.val(),h.minimumInputLength)+"</li>":""),void(n&&this.showSearch&&this.showSearch(!0));if(h.maximumInputLength&&c.val().length>h.maximumInputLength)return void i(S(h.formatInputTooLong,"formatInputTooLong")?"<li class='select2-no-results'>"+T(h.formatInputTooLong,h.element,c.val(),h.maximumInputLength)+"</li>":"");h.formatSearching&&0===this.findHighlightableChoices().length&&i("<li class='select2-searching'>"+T(h.formatSearching,h.element)+"</li>"),c.addClass("select2-active"),this.removeHighlight(),a=this.tokenize(),a!=t&&null!=a&&c.val(a),this.resultsPage=1,h.query({element:h.element,term:c.val(),page:this.resultsPage,context:null,matcher:h.matcher,callback:this.bind(function(o){var a;if(l==this.queryCount){if(!this.opened())return void this.search.removeClass("select2-active");if(o.hasError!==t&&S(h.formatAjaxError,"formatAjaxError"))return void i("<li class='select2-ajax-error'>"+T(h.formatAjaxError,h.element,o.jqXHR,o.textStatus,o.errorThrown)+"</li>");if(this.context=o.context===t?null:o.context,this.opts.createSearchChoice&&""!==c.val()&&(a=this.opts.createSearchChoice.call(f,c.val(),o.results),a!==t&&null!==a&&f.id(a)!==t&&null!==f.id(a)&&0===e(o.results).filter(function(){return s(f.id(this),f.id(a))}).length&&this.opts.createSearchChoicePosition(o.results,a)),0===o.results.length&&S(h.formatNoMatches,"formatNoMatches"))return void i("<li class='select2-no-results'>"+T(h.formatNoMatches,h.element,c.val())+"</li>");u.empty(),f.opts.populateResults.call(this,u,o.results,{term:c.val(),page:this.resultsPage,context:null}),o.more===!0&&S(h.formatLoadMore,"formatLoadMore")&&(u.append("<li class='select2-more-results'>"+h.escapeMarkup(T(h.formatLoadMore,h.element,this.resultsPage))+"</li>"),window.setTimeout(function(){f.loadMoreIfNeeded()},10)),this.postprocessResults(o,n),r(),this.opts.element.trigger({type:"select2-loaded",items:o})}})})}},cancel:function(){this.close()},blur:function(){this.opts.selectOnBlur&&this.selectHighlighted({noFocus:!0}),this.close(),this.container.removeClass("select2-container-active"),this.search[0]===document.activeElement&&this.search.blur(),this.clearSearch(),this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus")},focusSearch:function(){p(this.search)},selectHighlighted:function(e){if(this._touchMoved)return void this.clearTouchMoved();var t=this.highlight(),n=this.results.find(".select2-highlighted"),r=n.closest(".select2-result").data("select2-data");r?(this.highlight(t),this.onSelect(r,e)):e&&e.noFocus&&this.close()},getPlaceholder:function(){var e;return this.opts.element.attr("placeholder")||this.opts.element.attr("data-placeholder")||this.opts.element.data("placeholder")||this.opts.placeholder||((e=this.getPlaceholderOption())!==t?e.text():t)},getPlaceholderOption:function(){if(this.select){var n=this.select.children("option").first();if(this.opts.placeholderOption!==t)return"first"===this.opts.placeholderOption&&n||"function"==typeof this.opts.placeholderOption&&this.opts.placeholderOption(this.select);if(""===e.trim(n.text())&&""===n.val())return n}},initContainerWidth:function(){function n(){var n,r,i,o,s,a;if("off"===this.opts.width)return null;if("element"===this.opts.width)return 0===this.opts.element.outerWidth(!1)?"auto":this.opts.element.outerWidth(!1)+"px";if("copy"===this.opts.width||"resolve"===this.opts.width){if(n=this.opts.element.attr("style"),n!==t)for(r=n.split(";"),o=0,s=r.length;s>o;o+=1)if(a=r[o].replace(/\s/g,""),i=a.match(/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i),null!==i&&i.length>=1)return i[1];return"resolve"===this.opts.width?(n=this.opts.element.css("width"),n.indexOf("%")>0?n:0===this.opts.element.outerWidth(!1)?"auto":this.opts.element.outerWidth(!1)+"px"):null}return e.isFunction(this.opts.width)?this.opts.width():this.opts.width}var r=n.call(this);null!==r&&this.container.css("width",r)}}),O=j(N,{createContainer:function(){var t=e(document.createElement("div")).attr({"class":"select2-container"}).html(["<a href='javascript:void(0)' class='select2-choice' tabindex='-1'>","   <span class='select2-chosen'>&#160;</span><abbr class='select2-search-choice-close'></abbr>","   <span class='select2-arrow' role='presentation'><b role='presentation'></b></span>","</a>","<label for='' class='select2-offscreen'></label>","<input class='select2-focusser select2-offscreen' type='text' aria-haspopup='true' role='button' />","<div class='select2-drop select2-display-none'>","   <div class='select2-search'>","       <label for='' class='select2-offscreen'></label>","       <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input' role='combobox' aria-expanded='true'","       aria-autocomplete='list' />","   </div>","   <ul class='select2-results' role='listbox'>","   </ul>","</div>"].join(""));return t},enableInterface:function(){this.parent.enableInterface.apply(this,arguments)&&this.focusser.prop("disabled",!this.isInterfaceEnabled())},opening:function(){var n,r,i;this.opts.minimumResultsForSearch>=0&&this.showSearch(!0),this.parent.opening.apply(this,arguments),this.showSearchInput!==!1&&this.search.val(this.focusser.val()),this.opts.shouldFocusInput(this)&&(this.search.focus(),n=this.search.get(0),n.createTextRange?(r=n.createTextRange(),r.collapse(!1),r.select()):n.setSelectionRange&&(i=this.search.val().length,n.setSelectionRange(i,i))),""===this.search.val()&&this.nextSearchTerm!=t&&(this.search.val(this.nextSearchTerm),this.search.select()),this.focusser.prop("disabled",!0).val(""),this.updateResults(!0),this.opts.element.trigger(e.Event("select2-open"))},close:function(){this.opened()&&(this.parent.close.apply(this,arguments),this.focusser.prop("disabled",!1),this.opts.shouldFocusInput(this)&&this.focusser.focus())},focus:function(){this.opened()?this.close():(this.focusser.prop("disabled",!1),this.opts.shouldFocusInput(this)&&this.focusser.focus())},isFocused:function(){return this.container.hasClass("select2-container-active")},cancel:function(){this.parent.cancel.apply(this,arguments),this.focusser.prop("disabled",!1),this.opts.shouldFocusInput(this)&&this.focusser.focus()},destroy:function(){e("label[for='"+this.focusser.attr("id")+"']").attr("for",this.opts.element.attr("id")),this.parent.destroy.apply(this,arguments),A.call(this,"selection","focusser")},initContainer:function(){var t,r,i=this.container,o=this.dropdown,s=I();this.showSearch(this.opts.minimumResultsForSearch<0?!1:!0),this.selection=t=i.find(".select2-choice"),this.focusser=i.find(".select2-focusser"),t.find(".select2-chosen").attr("id","select2-chosen-"+s),this.focusser.attr("aria-labelledby","select2-chosen-"+s),this.results.attr("id","select2-results-"+s),this.search.attr("aria-owns","select2-results-"+s),this.focusser.attr("id","s2id_autogen"+s),r=e("label[for='"+this.opts.element.attr("id")+"']"),this.opts.element.focus(this.bind(function(){this.focus()})),this.focusser.prev().text(r.text()).attr("for",this.focusser.attr("id"));var a=this.opts.element.attr("title");this.opts.element.attr("title",a||r.text()),this.focusser.attr("tabindex",this.elementTabIndex),this.search.attr("id",this.focusser.attr("id")+"_search"),this.search.prev().text(e("label[for='"+this.focusser.attr("id")+"']").text()).attr("for",this.search.attr("id")),this.search.on("keydown",this.bind(function(e){if(this.isInterfaceEnabled()&&229!=e.keyCode){if(e.which===H.PAGE_UP||e.which===H.PAGE_DOWN)return void g(e);switch(e.which){case H.UP:case H.DOWN:return this.moveHighlight(e.which===H.UP?-1:1),void g(e);case H.ENTER:return this.selectHighlighted(),void g(e);case H.TAB:return void this.selectHighlighted({noFocus:!0});case H.ESC:return this.cancel(e),void g(e)}}})),this.search.on("blur",this.bind(function(){document.activeElement===this.body.get(0)&&window.setTimeout(this.bind(function(){this.opened()&&this.search.focus()}),0)})),this.focusser.on("keydown",this.bind(function(e){if(this.isInterfaceEnabled()&&e.which!==H.TAB&&!H.isControl(e)&&!H.isFunctionKey(e)&&e.which!==H.ESC){if(this.opts.openOnEnter===!1&&e.which===H.ENTER)return void g(e);if(e.which==H.DOWN||e.which==H.UP||e.which==H.ENTER&&this.opts.openOnEnter){if(e.altKey||e.ctrlKey||e.shiftKey||e.metaKey)return;return this.open(),void g(e)}return e.which==H.DELETE||e.which==H.BACKSPACE?(this.opts.allowClear&&this.clear(),void g(e)):void 0}})),c(this.focusser),this.focusser.on("keyup-change input",this.bind(function(e){if(this.opts.minimumResultsForSearch>=0){if(e.stopPropagation(),this.opened())return;this.open()}})),t.on("mousedown touchstart","abbr",this.bind(function(e){this.isInterfaceEnabled()&&(this.clear(),v(e),this.close(),this.selection&&this.selection.focus())})),t.on("mousedown touchstart",this.bind(function(r){n(t),this.container.hasClass("select2-container-active")||this.opts.element.trigger(e.Event("select2-focus")),this.opened()?this.close():this.isInterfaceEnabled()&&this.open(),g(r)})),o.on("mousedown touchstart",this.bind(function(){this.opts.shouldFocusInput(this)&&this.search.focus()})),t.on("focus",this.bind(function(e){g(e)})),this.focusser.on("focus",this.bind(function(){this.container.hasClass("select2-container-active")||this.opts.element.trigger(e.Event("select2-focus")),this.container.addClass("select2-container-active")})).on("blur",this.bind(function(){this.opened()||(this.container.removeClass("select2-container-active"),this.opts.element.trigger(e.Event("select2-blur")))})),this.search.on("focus",this.bind(function(){this.container.hasClass("select2-container-active")||this.opts.element.trigger(e.Event("select2-focus")),this.container.addClass("select2-container-active")})),this.initContainerWidth(),this.opts.element.hide(),this.setPlaceholder()},clear:function(t){var n=this.selection.data("select2-data");if(n){var r=e.Event("select2-clearing");if(this.opts.element.trigger(r),r.isDefaultPrevented())return;var i=this.getPlaceholderOption();this.opts.element.val(i?i.val():""),this.selection.find(".select2-chosen").empty(),this.selection.removeData("select2-data"),this.setPlaceholder(),t!==!1&&(this.opts.element.trigger({type:"select2-removed",val:this.id(n),choice:n}),this.triggerChange({removed:n}))}},initSelection:function(){if(this.isPlaceholderOptionSelected())this.updateSelection(null),this.close(),this.setPlaceholder();else{var e=this;this.opts.initSelection.call(null,this.opts.element,function(n){n!==t&&null!==n&&(e.updateSelection(n),e.close(),e.setPlaceholder(),e.nextSearchTerm=e.opts.nextSearchTerm(n,e.search.val()))})}},isPlaceholderOptionSelected:function(){var e;return this.getPlaceholder()===t?!1:(e=this.getPlaceholderOption())!==t&&e.prop("selected")||""===this.opts.element.val()||this.opts.element.val()===t||null===this.opts.element.val()},prepareOpts:function(){var t=this.parent.prepareOpts.apply(this,arguments),n=this;return"select"===t.element.get(0).tagName.toLowerCase()?t.initSelection=function(e,t){var r=e.find("option").filter(function(){return this.selected&&!this.disabled});t(n.optionToData(r))}:"data"in t&&(t.initSelection=t.initSelection||function(n,r){var i=n.val(),o=null;t.query({matcher:function(e,n,r){var a=s(i,t.id(r));return a&&(o=r),a},callback:e.isFunction(r)?function(){r(o)}:e.noop})}),t},getPlaceholder:function(){return this.select&&this.getPlaceholderOption()===t?t:this.parent.getPlaceholder.apply(this,arguments)},setPlaceholder:function(){var e=this.getPlaceholder();if(this.isPlaceholderOptionSelected()&&e!==t){if(this.select&&this.getPlaceholderOption()===t)return;this.selection.find(".select2-chosen").html(this.opts.escapeMarkup(e)),this.selection.addClass("select2-default"),this.container.removeClass("select2-allowclear")}},postprocessResults:function(e,t,n){var r=0,i=this;if(this.findHighlightableChoices().each2(function(e,t){return s(i.id(t.data("select2-data")),i.opts.element.val())?(r=e,!1):void 0}),n!==!1&&this.highlight(t===!0&&r>=0?r:0),t===!0){var o=this.opts.minimumResultsForSearch;o>=0&&this.showSearch(E(e.results)>=o)}},showSearch:function(t){this.showSearchInput!==t&&(this.showSearchInput=t,this.dropdown.find(".select2-search").toggleClass("select2-search-hidden",!t),this.dropdown.find(".select2-search").toggleClass("select2-offscreen",!t),e(this.dropdown,this.container).toggleClass("select2-with-searchbox",t))},onSelect:function(e,t){if(this.triggerSelect(e)){var n=this.opts.element.val(),r=this.data();this.opts.element.val(this.id(e)),this.updateSelection(e),this.opts.element.trigger({type:"select2-selected",val:this.id(e),choice:e}),this.nextSearchTerm=this.opts.nextSearchTerm(e,this.search.val()),this.close(),t&&t.noFocus||!this.opts.shouldFocusInput(this)||this.focusser.focus(),s(n,this.id(e))||this.triggerChange({added:e,removed:r})}},updateSelection:function(e){var n,r,i=this.selection.find(".select2-chosen");this.selection.data("select2-data",e),i.empty(),null!==e&&(n=this.opts.formatSelection(e,i,this.opts.escapeMarkup)),n!==t&&i.append(n),r=this.opts.formatSelectionCssClass(e,i),r!==t&&i.addClass(r),this.selection.removeClass("select2-default"),this.opts.allowClear&&this.getPlaceholder()!==t&&this.container.addClass("select2-allowclear")},val:function(){var e,n=!1,r=null,i=this,o=this.data();if(0===arguments.length)return this.opts.element.val();if(e=arguments[0],arguments.length>1&&(n=arguments[1]),this.select)this.select.val(e).find("option").filter(function(){return this.selected}).each2(function(e,t){return r=i.optionToData(t),!1}),this.updateSelection(r),this.setPlaceholder(),n&&this.triggerChange({added:r,removed:o});else{if(!e&&0!==e)return void this.clear(n);if(this.opts.initSelection===t)throw new Error("cannot call val() if initSelection() is not defined");this.opts.element.val(e),this.opts.initSelection(this.opts.element,function(e){i.opts.element.val(e?i.id(e):""),i.updateSelection(e),i.setPlaceholder(),n&&i.triggerChange({added:e,removed:o})})}},clearSearch:function(){this.search.val(""),this.focusser.val("")},data:function(e){var n,r=!1;return 0===arguments.length?(n=this.selection.data("select2-data"),n==t&&(n=null),n):(arguments.length>1&&(r=arguments[1]),void(e?(n=this.data(),this.opts.element.val(e?this.id(e):""),this.updateSelection(e),r&&this.triggerChange({added:e,removed:n})):this.clear(r)))}}),D=j(N,{createContainer:function(){var t=e(document.createElement("div")).attr({"class":"select2-container select2-container-multi"}).html(["<ul class='select2-choices'>","  <li class='select2-search-field'>","    <label for='' class='select2-offscreen'></label>","    <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input'>","  </li>","</ul>","<div class='select2-drop select2-drop-multi select2-display-none'>","   <ul class='select2-results'>","   </ul>","</div>"].join(""));return t},prepareOpts:function(){var t=this.parent.prepareOpts.apply(this,arguments),n=this;return"select"===t.element.get(0).tagName.toLowerCase()?t.initSelection=function(e,t){var r=[];e.find("option").filter(function(){return this.selected&&!this.disabled}).each2(function(e,t){r.push(n.optionToData(t))}),t(r)}:"data"in t&&(t.initSelection=t.initSelection||function(n,r){var i=a(n.val(),t.separator,t.transformVal),o=[];t.query({matcher:function(n,r,a){var l=e.grep(i,function(e){return s(e,t.id(a))}).length;return l&&o.push(a),l},callback:e.isFunction(r)?function(){for(var e=[],n=0;n<i.length;n++)for(var a=i[n],l=0;l<o.length;l++){var c=o[l];if(s(a,t.id(c))){e.push(c),o.splice(l,1);break}}r(e)}:e.noop})}),t},selectChoice:function(e){var t=this.container.find(".select2-search-choice-focus");t.length&&e&&e[0]==t[0]||(t.length&&this.opts.element.trigger("choice-deselected",t),t.removeClass("select2-search-choice-focus"),e&&e.length&&(this.close(),e.addClass("select2-search-choice-focus"),this.opts.element.trigger("choice-selected",e)))},destroy:function(){e("label[for='"+this.search.attr("id")+"']").attr("for",this.opts.element.attr("id")),this.parent.destroy.apply(this,arguments),A.call(this,"searchContainer","selection")},initContainer:function(){var t,n=".select2-choices";this.searchContainer=this.container.find(".select2-search-field"),this.selection=t=this.container.find(n);var r=this;this.selection.on("click",".select2-container:not(.select2-container-disabled) .select2-search-choice:not(.select2-locked)",function(){r.search[0].focus(),r.selectChoice(e(this))}),this.search.attr("id","s2id_autogen"+I()),this.search.prev().text(e("label[for='"+this.opts.element.attr("id")+"']").text()).attr("for",this.search.attr("id")),this.opts.element.focus(this.bind(function(){this.focus()})),this.search.on("input paste",this.bind(function(){this.search.attr("placeholder")&&0==this.search.val().length||this.isInterfaceEnabled()&&(this.opened()||this.open())})),this.search.attr("tabindex",this.elementTabIndex),this.keydowns=0,this.search.on("keydown",this.bind(function(e){if(this.isInterfaceEnabled()){++this.keydowns;var n=t.find(".select2-search-choice-focus"),r=n.prev(".select2-search-choice:not(.select2-locked)"),i=n.next(".select2-search-choice:not(.select2-locked)"),o=d(this.search);if(n.length&&(e.which==H.LEFT||e.which==H.RIGHT||e.which==H.BACKSPACE||e.which==H.DELETE||e.which==H.ENTER)){var s=n;return e.which==H.LEFT&&r.length?s=r:e.which==H.RIGHT?s=i.length?i:null:e.which===H.BACKSPACE?this.unselect(n.first())&&(this.search.width(10),s=r.length?r:i):e.which==H.DELETE?this.unselect(n.first())&&(this.search.width(10),s=i.length?i:null):e.which==H.ENTER&&(s=null),this.selectChoice(s),g(e),void(s&&s.length||this.open())}if((e.which===H.BACKSPACE&&1==this.keydowns||e.which==H.LEFT)&&0==o.offset&&!o.length)return this.selectChoice(t.find(".select2-search-choice:not(.select2-locked)").last()),void g(e);if(this.selectChoice(null),this.opened())switch(e.which){case H.UP:case H.DOWN:return this.moveHighlight(e.which===H.UP?-1:1),void g(e);case H.ENTER:return this.selectHighlighted(),void g(e);case H.TAB:return this.selectHighlighted({noFocus:!0}),void this.close();case H.ESC:return this.cancel(e),void g(e)}if(e.which!==H.TAB&&!H.isControl(e)&&!H.isFunctionKey(e)&&e.which!==H.BACKSPACE&&e.which!==H.ESC){if(e.which===H.ENTER){if(this.opts.openOnEnter===!1)return;if(e.altKey||e.ctrlKey||e.shiftKey||e.metaKey)return}this.open(),(e.which===H.PAGE_UP||e.which===H.PAGE_DOWN)&&g(e),e.which===H.ENTER&&g(e)}}})),this.search.on("keyup",this.bind(function(){this.keydowns=0,this.resizeSearch()})),this.search.on("blur",this.bind(function(t){this.container.removeClass("select2-container-active"),this.search.removeClass("select2-focused"),this.selectChoice(null),this.opened()||this.clearSearch(),t.stopImmediatePropagation(),this.opts.element.trigger(e.Event("select2-blur"))})),this.container.on("click",n,this.bind(function(t){this.isInterfaceEnabled()&&(e(t.target).closest(".select2-search-choice").length>0||(this.selectChoice(null),this.clearPlaceholder(),this.container.hasClass("select2-container-active")||this.opts.element.trigger(e.Event("select2-focus")),this.open(),this.focusSearch(),t.preventDefault()))
})),this.container.on("focus",n,this.bind(function(){this.isInterfaceEnabled()&&(this.container.hasClass("select2-container-active")||this.opts.element.trigger(e.Event("select2-focus")),this.container.addClass("select2-container-active"),this.dropdown.addClass("select2-drop-active"),this.clearPlaceholder())})),this.initContainerWidth(),this.opts.element.hide(),this.clearSearch()},enableInterface:function(){this.parent.enableInterface.apply(this,arguments)&&this.search.prop("disabled",!this.isInterfaceEnabled())},initSelection:function(){if(""===this.opts.element.val()&&""===this.opts.element.text()&&(this.updateSelection([]),this.close(),this.clearSearch()),this.select||""!==this.opts.element.val()){var e=this;this.opts.initSelection.call(null,this.opts.element,function(n){n!==t&&null!==n&&(e.updateSelection(n),e.close(),e.clearSearch())})}},clearSearch:function(){var e=this.getPlaceholder(),n=this.getMaxSearchWidth();e!==t&&0===this.getVal().length&&this.search.hasClass("select2-focused")===!1?(this.search.val(e).addClass("select2-default"),this.search.width(n>0?n:this.container.css("width"))):this.search.val("").width(10)},clearPlaceholder:function(){this.search.hasClass("select2-default")&&this.search.val("").removeClass("select2-default")},opening:function(){this.clearPlaceholder(),this.resizeSearch(),this.parent.opening.apply(this,arguments),this.focusSearch(),""===this.search.val()&&this.nextSearchTerm!=t&&(this.search.val(this.nextSearchTerm),this.search.select()),this.updateResults(!0),this.opts.shouldFocusInput(this)&&this.search.focus(),this.opts.element.trigger(e.Event("select2-open"))},close:function(){this.opened()&&this.parent.close.apply(this,arguments)},focus:function(){this.close(),this.search.focus()},isFocused:function(){return this.search.hasClass("select2-focused")},updateSelection:function(t){var n=[],r=[],o=this;e(t).each(function(){i(o.id(this),n)<0&&(n.push(o.id(this)),r.push(this))}),t=r,this.selection.find(".select2-search-choice").remove(),e(t).each(function(){o.addSelectedChoice(this)}),o.postprocessResults()},tokenize:function(){var e=this.search.val();e=this.opts.tokenizer.call(this,e,this.data(),this.bind(this.onSelect),this.opts),null!=e&&e!=t&&(this.search.val(e),e.length>0&&this.open())},onSelect:function(e,n){this.triggerSelect(e)&&""!==e.text&&(this.addSelectedChoice(e),this.opts.element.trigger({type:"selected",val:this.id(e),choice:e}),this.nextSearchTerm=this.opts.nextSearchTerm(e,this.search.val()),this.clearSearch(),this.updateResults(),(this.select||!this.opts.closeOnSelect)&&this.postprocessResults(e,!1,this.opts.closeOnSelect===!0),this.opts.closeOnSelect?(this.close(),this.search.width(10)):this.countSelectableResults()>0?(this.search.width(10),this.resizeSearch(),this.getMaximumSelectionSize()>0&&this.val().length>=this.getMaximumSelectionSize()?this.updateResults(!0):this.nextSearchTerm!=t&&(this.search.val(this.nextSearchTerm),this.updateResults(),this.search.select()),this.positionDropdown()):(this.close(),this.search.width(10)),this.triggerChange({added:e}),n&&n.noFocus||this.focusSearch())},cancel:function(){this.close(),this.focusSearch()},addSelectedChoice:function(n){var r,i,o=!n.locked,s=e("<li class='select2-search-choice'>    <div></div>    <a href='#' class='select2-search-choice-close' tabindex='-1'></a></li>"),a=e("<li class='select2-search-choice select2-locked'><div></div></li>"),l=o?s:a,c=this.id(n),u=this.getVal();r=this.opts.formatSelection(n,l.find("div"),this.opts.escapeMarkup),r!=t&&l.find("div").replaceWith(e("<div></div>").html(r)),i=this.opts.formatSelectionCssClass(n,l.find("div")),i!=t&&l.addClass(i),o&&l.find(".select2-search-choice-close").on("mousedown",g).on("click dblclick",this.bind(function(t){this.isInterfaceEnabled()&&(this.unselect(e(t.target)),this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus"),g(t),this.close(),this.focusSearch())})).on("focus",this.bind(function(){this.isInterfaceEnabled()&&(this.container.addClass("select2-container-active"),this.dropdown.addClass("select2-drop-active"))})),l.data("select2-data",n),l.insertBefore(this.searchContainer),u.push(c),this.setVal(u)},unselect:function(t){var n,r,o=this.getVal();if(t=t.closest(".select2-search-choice"),0===t.length)throw"Invalid argument: "+t+". Must be .select2-search-choice";if(n=t.data("select2-data")){var s=e.Event("select2-removing");if(s.val=this.id(n),s.choice=n,this.opts.element.trigger(s),s.isDefaultPrevented())return!1;for(;(r=i(this.id(n),o))>=0;)o.splice(r,1),this.setVal(o),this.select&&this.postprocessResults();return t.remove(),this.opts.element.trigger({type:"select2-removed",val:this.id(n),choice:n}),this.triggerChange({removed:n}),!0}},postprocessResults:function(e,t,n){var r=this.getVal(),o=this.results.find(".select2-result"),s=this.results.find(".select2-result-with-children"),a=this;o.each2(function(e,t){var n=a.id(t.data("select2-data"));i(n,r)>=0&&(t.addClass("select2-selected"),t.find(".select2-result-selectable").addClass("select2-selected"))}),s.each2(function(e,t){t.is(".select2-result-selectable")||0!==t.find(".select2-result-selectable:not(.select2-selected)").length||t.addClass("select2-selected")}),-1==this.highlight()&&n!==!1&&this.opts.closeOnSelect===!0&&a.highlight(0),!this.opts.createSearchChoice&&!o.filter(".select2-result:not(.select2-selected)").length>0&&(!e||e&&!e.more&&0===this.results.find(".select2-no-results").length)&&S(a.opts.formatNoMatches,"formatNoMatches")&&this.results.append("<li class='select2-no-results'>"+T(a.opts.formatNoMatches,a.opts.element,a.search.val())+"</li>")},getMaxSearchWidth:function(){return this.selection.width()-l(this.search)},resizeSearch:function(){var e,t,n,r,i,o=l(this.search);e=m(this.search)+10,t=this.search.offset().left,n=this.selection.width(),r=this.selection.offset().left,i=n-(t-r)-o,e>i&&(i=n-o),40>i&&(i=n-o),0>=i&&(i=e),this.search.width(Math.floor(i))},getVal:function(){var e;return this.select?(e=this.select.val(),null===e?[]:e):(e=this.opts.element.val(),a(e,this.opts.separator,this.opts.transformVal))},setVal:function(t){var n;this.select?this.select.val(t):(n=[],e(t).each(function(){i(this,n)<0&&n.push(this)}),this.opts.element.val(0===n.length?"":n.join(this.opts.separator)))},buildChangeDetails:function(e,t){for(var t=t.slice(0),e=e.slice(0),n=0;n<t.length;n++)for(var r=0;r<e.length;r++)s(this.opts.id(t[n]),this.opts.id(e[r]))&&(t.splice(n,1),n>0&&n--,e.splice(r,1),r--);return{added:t,removed:e}},val:function(n,r){var i,o=this;if(0===arguments.length)return this.getVal();if(i=this.data(),i.length||(i=[]),!n&&0!==n)return this.opts.element.val(""),this.updateSelection([]),this.clearSearch(),void(r&&this.triggerChange({added:this.data(),removed:i}));if(this.setVal(n),this.select)this.opts.initSelection(this.select,this.bind(this.updateSelection)),r&&this.triggerChange(this.buildChangeDetails(i,this.data()));else{if(this.opts.initSelection===t)throw new Error("val() cannot be called if initSelection() is not defined");this.opts.initSelection(this.opts.element,function(t){var n=e.map(t,o.id);o.setVal(n),o.updateSelection(t),o.clearSearch(),r&&o.triggerChange(o.buildChangeDetails(i,o.data()))})}this.clearSearch()},onSortStart:function(){if(this.select)throw new Error("Sorting of elements is not supported when attached to <select>. Attach to <input type='hidden'/> instead.");this.search.width(0),this.searchContainer.hide()},onSortEnd:function(){var t=[],n=this;this.searchContainer.show(),this.searchContainer.appendTo(this.searchContainer.parent()),this.resizeSearch(),this.selection.find(".select2-search-choice").each(function(){t.push(n.opts.id(e(this).data("select2-data")))}),this.setVal(t),this.triggerChange()},data:function(t,n){var r,i,o=this;return 0===arguments.length?this.selection.children(".select2-search-choice").map(function(){return e(this).data("select2-data")}).get():(i=this.data(),t||(t=[]),r=e.map(t,function(e){return o.opts.id(e)}),this.setVal(r),this.updateSelection(t),this.clearSearch(),n&&this.triggerChange(this.buildChangeDetails(i,this.data())),void 0)}}),e.fn.select2=function(){var n,r,o,s,a,l=Array.prototype.slice.call(arguments,0),c=["val","destroy","opened","open","close","focus","isFocused","container","dropdown","onSortStart","onSortEnd","enable","disable","readonly","positionDropdown","data","search"],u=["opened","isFocused","container","dropdown"],h=["val","data"],f={search:"externalSearch"};return this.each(function(){if(0===l.length||"object"==typeof l[0])n=0===l.length?{}:e.extend({},l[0]),n.element=e(this),"select"===n.element.get(0).tagName.toLowerCase()?a=n.element.prop("multiple"):(a=n.multiple||!1,"tags"in n&&(n.multiple=a=!0)),r=a?new window.Select2["class"].multi:new window.Select2["class"].single,r.init(n);else{if("string"!=typeof l[0])throw"Invalid arguments to select2 plugin: "+l;if(i(l[0],c)<0)throw"Unknown method: "+l[0];if(s=t,r=e(this).data("select2"),r===t)return;if(o=l[0],"container"===o?s=r.container:"dropdown"===o?s=r.dropdown:(f[o]&&(o=f[o]),s=r[o].apply(r,l.slice(1))),i(l[0],u)>=0||i(l[0],h)>=0&&1==l.length)return!1}}),s===t?this:s},e.fn.select2.defaults={width:"copy",loadMorePadding:0,closeOnSelect:!0,openOnEnter:!0,containerCss:{},dropdownCss:{},containerCssClass:"",dropdownCssClass:"",formatResult:function(e,t,n,r){var i=[];return b(this.text(e),n.term,i,r),i.join("")},transformVal:function(t){return e.trim(t)},formatSelection:function(e,n,r){return e?r(this.text(e)):t},sortResults:function(e){return e},formatResultCssClass:function(e){return e.css},formatSelectionCssClass:function(){return t},minimumResultsForSearch:0,minimumInputLength:0,maximumInputLength:null,maximumSelectionSize:0,id:function(e){return e==t?null:e.id},text:function(t){return t&&this.data&&this.data.text?e.isFunction(this.data.text)?this.data.text(t):t[this.data.text]:t.text},matcher:function(e,t){return r(""+t).toUpperCase().indexOf(r(""+e).toUpperCase())>=0},separator:",",tokenSeparators:[],tokenizer:k,escapeMarkup:w,blurOnChange:!1,selectOnBlur:!1,adaptContainerCssClass:function(e){return e},adaptDropdownCssClass:function(){return null},nextSearchTerm:function(){return t},searchInputPlaceholder:"",createSearchChoicePosition:"top",shouldFocusInput:function(e){var t="ontouchstart"in window||navigator.msMaxTouchPoints>0;return t&&e.opts.minimumResultsForSearch<0?!1:!0}},e.fn.select2.locales=[],e.fn.select2.locales.en={formatMatches:function(e){return 1===e?"One result is available, press enter to select it.":e+" results are available, use up and down arrow keys to navigate."},formatNoMatches:function(){return"No matches found"},formatAjaxError:function(){return"Loading failed"},formatInputTooShort:function(e,t){var n=t-e.length;return"Please enter "+n+" or more character"+(1==n?"":"s")},formatInputTooLong:function(e,t){var n=e.length-t;return"Please delete "+n+" character"+(1==n?"":"s")},formatSelectionTooBig:function(e){return"You can only select "+e+" item"+(1==e?"":"s")},formatLoadMore:function(){return"Loading more results…"},formatSearching:function(){return"Searching…"}},e.extend(e.fn.select2.defaults,e.fn.select2.locales.en),e.fn.select2.ajaxDefaults={transport:e.ajax,params:{type:"GET",cache:!1,dataType:"json"}},window.Select2={query:{ajax:x,local:C,tags:_},util:{debounce:h,markMatch:b,escapeMarkup:w,stripDiacritics:r},"class":{"abstract":N,single:O,multi:D}}}}(jQuery)},{}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,